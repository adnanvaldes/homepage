<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adnan Valdes</title><link href="https://adnanvaldes.pages.dev/" rel="alternate"/><link href="https://adnanvaldes.pages.dev/feeds/all.atom.xml" rel="self"/><id>https://adnanvaldes.pages.dev/</id><updated>2024-12-22T13:25:27-08:00</updated><entry><title>Using subpackages in Django</title><link href="https://adnanvaldes.pages.dev/202412221228.html" rel="alternate"/><published>2024-12-22T00:00:00-08:00</published><updated>2024-12-22T13:19:49-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2024-12-22:/202412221228.html</id><summary type="html">&lt;p&gt;I am working on a Learning Management System using Django. It started fairly simply, with &lt;code&gt;startapp lms&lt;/code&gt;, a few models defined in a single &lt;code&gt;models.py&lt;/code&gt; file, and a basic Django file structure. Eventually, I had to split my models file using Python subpackages to manage the complexity.&lt;/p&gt;
&lt;p&gt;The problem started when my &lt;code&gt;models.py&lt;/code&gt; file contained just a few models:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lesson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quiz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Answer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As my project grew in size and complexity I found that the &lt;code&gt;models.py&lt;/code&gt;, originally concise and manageable, grew into hundreds of lines with multiple semi-related models. For example, at some point I realized that I needed to include a &lt;code&gt;Content&lt;/code&gt; model to manage images and videos embedded in the courses. It started simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After a while I realized that are different &lt;em&gt;types&lt;/em&gt; of content that the application will use. Around the same time I also realized that I was repeating myself a lot in the LMS models themselves - all of them have similar properties, after all - so I refactored some of the code and created a new file, &lt;code&gt;base_models.py&lt;/code&gt; that included &lt;code&gt;BaseModel&lt;/code&gt; and &lt;code&gt;BaseContent&lt;/code&gt; models.&lt;/p&gt;
&lt;p&gt;This worked for a while, but then I also added three sub-classes to &lt;code&gt;models.py&lt;/code&gt;: &lt;code&gt;TextContent&lt;/code&gt;, &lt;code&gt;ImageContent&lt;/code&gt;, and &lt;code&gt;VideoContent&lt;/code&gt;. I expanded the models to include student tracking, using &lt;code&gt;UserQuizAttempt&lt;/code&gt; and &lt;code&gt;UserLessonProgress&lt;/code&gt;. I started to dread opening the models file: a wall of text …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working on a Learning Management System using Django. It started fairly simply, with &lt;code&gt;startapp lms&lt;/code&gt;, a few models defined in a single &lt;code&gt;models.py&lt;/code&gt; file, and a basic Django file structure. Eventually, I had to split my models file using Python subpackages to manage the complexity.&lt;/p&gt;
&lt;p&gt;The problem started when my &lt;code&gt;models.py&lt;/code&gt; file contained just a few models:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lesson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quiz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Answer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As my project grew in size and complexity I found that the &lt;code&gt;models.py&lt;/code&gt;, originally concise and manageable, grew into hundreds of lines with multiple semi-related models. For example, at some point I realized that I needed to include a &lt;code&gt;Content&lt;/code&gt; model to manage images and videos embedded in the courses. It started simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a while I realized that are different &lt;em&gt;types&lt;/em&gt; of content that the application will use. Around the same time I also realized that I was repeating myself a lot in the LMS models themselves - all of them have similar properties, after all - so I refactored some of the code and created a new file, &lt;code&gt;base_models.py&lt;/code&gt; that included &lt;code&gt;BaseModel&lt;/code&gt; and &lt;code&gt;BaseContent&lt;/code&gt; models.&lt;/p&gt;
&lt;p&gt;This worked for a while, but then I also added three sub-classes to &lt;code&gt;models.py&lt;/code&gt;: &lt;code&gt;TextContent&lt;/code&gt;, &lt;code&gt;ImageContent&lt;/code&gt;, and &lt;code&gt;VideoContent&lt;/code&gt;. I expanded the models to include student tracking, using &lt;code&gt;UserQuizAttempt&lt;/code&gt; and &lt;code&gt;UserLessonProgress&lt;/code&gt;. I started to dread opening the models file: a wall of text, a ton of models, and a lot of mental overhead whenever I wanted to make any change to any one given class. &lt;/p&gt;
&lt;p&gt;This, of course, is a symptom of increasing complexity.&lt;/p&gt;
&lt;p&gt;And because I am in the middle of reading &lt;a href="https://app.thestorygraph.com/books/78431e85-848c-47d2-b4f1-5a86a686e1e4"&gt;&lt;em&gt;A Philosophy of Software Design&lt;/em&gt;&lt;/a&gt; I realized that I should embrace one of the first lessons that John Ousterhout teaches: have a zero-tolerance policy towards complexity.&lt;/p&gt;
&lt;p&gt;The problem is that having a single &lt;code&gt;models.py&lt;/code&gt; file might suggest that things are less complex; a single file, presumably, is less complex than a multitude of files. As the file grows, however, the maintenance of that file becomes a challenge - from locating specific models, managing merge conflicts, and separating logic related to each part of the program. &lt;/p&gt;
&lt;p&gt;One solution is to create separate Django apps inside the project, but this creates a rather large series of imports I'll need all over the place, with models that depend on each other scattered across multiple apps, and a multitude of empty and mostly-empty files. Perhaps this solution works for a large software organization, but in my case I suspect it is overkill.&lt;/p&gt;
&lt;h3&gt;Python Subpackages&lt;/h3&gt;
&lt;p&gt;The solution I settled with was, first of all, to remember that Django is still just Python. And because it's just Python I can use &lt;a href="https://docs.python.org/3/tutorial/modules.html#packages"&gt;packages&lt;/a&gt; to manage my code. I don't mean creating something and placing it in the PyPi; I mean creating a folder called &lt;code&gt;models&lt;/code&gt;, adding separate files that contain logic for each part of the LMS, and then importing all of them in &lt;code&gt;__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lms/
├──&lt;span class="w"&gt; &lt;/span&gt;models/
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;base.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;choices.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;content.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;courses.py
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;quizzes.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;progress.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To reference &lt;em&gt;A  Philosophy Of Software Design&lt;/em&gt; again, this organization allows me to maintain the same &lt;em&gt;interface&lt;/em&gt; to the models while hiding away the complexity of the code. Because of the &lt;code&gt;__init__.py&lt;/code&gt;  file, Python seems the &lt;code&gt;models&lt;/code&gt; folder as a package which can be imported - the specifics of the package itself (what classes and such are loaded) are then handled by &lt;code&gt;__init__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# __init__.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.courses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lesson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Topic&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.quizzes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Quiz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Answer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.content&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VideoContent&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.progress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserLessonProgress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserQuizAttempt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, the rest of the code in the project can continue to make calls to &lt;code&gt;lms.models&lt;/code&gt; and import data using &lt;code&gt;from lms.models import Course&lt;/code&gt; without having to know that the structure of the models code has changed. This means I don't have to installed a new app in &lt;code&gt;settings.py&lt;/code&gt;, I don't have to rename models, or really do any extra work. At the same time, I have separate files that deal with each individual part of the LMS components.&lt;/p&gt;</content><category term="blog"/><category term="django"/></entry><entry><title>Nice Renice</title><link href="https://adnanvaldes.pages.dev/202411180838.html" rel="alternate"/><published>2024-11-18T00:00:00-08:00</published><updated>2024-11-26T11:23:24-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2024-11-18:/202411180838.html</id><summary type="html">&lt;h2&gt;How nice are your processes?&lt;/h2&gt;
&lt;p&gt;The &lt;a href="vault/top.md"&gt;top&lt;/a&gt; command has a row labelled "%Cpu(s)". It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;%Cpu(s):  1.7 us,  0.6 sy,  0.0 ni, 97.1 id,  0.0 wa,  0.6 hi,  0.0 si,  0.0 st`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is what &lt;code&gt;man top&lt;/code&gt; has to say about them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;un&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;niced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;sy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;niced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;
&lt;span class="n"&gt;wa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;waiting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;completion&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servicing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interrupts&lt;/span&gt;
&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servicing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interrupts&lt;/span&gt;
&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stolen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hypervisor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What even is an &lt;code&gt;un-niced&lt;/code&gt; process? &lt;/p&gt;
&lt;p&gt;Basically, Linux has a concept of how "nice" a program is - a value that describes how much priority the process is requesting from the CPU scheduler. In other words, the "nicer" a program is, the less priority it requests, and therefore the more it allows other processes to do their thing (see &lt;a href="https://en.wikipedia.org/wiki/Nice_(Unix)"&gt;wikipedia entry&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And this is incredible, because it means we can define the niceness of a background task, for example, such that we can continue working in the mean time. Consider the following: you run a media server, and you want to compress a bunch of your movies. This is a long term task, and you want to continue serving files in the mean time. You could some thing like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nice -n 19 compress file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In general, the higher the niceness value of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;How nice are your processes?&lt;/h2&gt;
&lt;p&gt;The &lt;a href="vault/top.md"&gt;top&lt;/a&gt; command has a row labelled "%Cpu(s)". It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;%Cpu(s):  1.7 us,  0.6 sy,  0.0 ni, 97.1 id,  0.0 wa,  0.6 hi,  0.0 si,  0.0 st`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is what &lt;code&gt;man top&lt;/code&gt; has to say about them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;un&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;niced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;sy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;niced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;
&lt;span class="n"&gt;wa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;waiting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;completion&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servicing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interrupts&lt;/span&gt;
&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;servicing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interrupts&lt;/span&gt;
&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stolen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hypervisor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What even is an &lt;code&gt;un-niced&lt;/code&gt; process? &lt;/p&gt;
&lt;p&gt;Basically, Linux has a concept of how "nice" a program is - a value that describes how much priority the process is requesting from the CPU scheduler. In other words, the "nicer" a program is, the less priority it requests, and therefore the more it allows other processes to do their thing (see &lt;a href="https://en.wikipedia.org/wiki/Nice_(Unix)"&gt;wikipedia entry&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And this is incredible, because it means we can define the niceness of a background task, for example, such that we can continue working in the mean time. Consider the following: you run a media server, and you want to compress a bunch of your movies. This is a long term task, and you want to continue serving files in the mean time. You could some thing like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nice -n 19 compress file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general, the higher the niceness value of a process, the less CPU priority it will require. Thus above the &lt;code&gt;compress&lt;/code&gt; process would have a niceness of "19", making it particularly nice (note that a negative value would be written as &lt;code&gt;nice --19&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Renice&lt;/h3&gt;
&lt;p&gt;The niceness of a program is not set in stone. Assuming we have the long running command, but we need to change its niceness down the line we can use the &lt;code&gt;renice&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;For example, we can run &lt;code&gt;renice -n 6 &lt;pid&gt;&lt;/pid&gt;&lt;/code&gt; to change lower the priority of the program with that PID. It should be noted that &lt;em&gt;increasing&lt;/em&gt; the priority (that is to say, lowering the niceness) requires &lt;code&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt;</content><category term="blog"/></entry><entry><title>task-cli</title><link href="https://adnanvaldes.pages.dev/202411171134.html" rel="alternate"/><published>2024-11-17T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2024-11-17:/202411171134.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/adnanvaldes/task-cli"&gt;&lt;code&gt;task-cli&lt;/code&gt;&lt;/a&gt; is the first project I'm working on from &lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt; as part of their &lt;a href="https://roadmap.sh/backend/projects"&gt;Backend Projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to write it in JavaScript using Node.js rather than defaulting to my go-to of Python because I wanted to learn how those two work, given how ubiquitous they are.&lt;/p&gt;
&lt;p&gt;The major objective here was to get started with JavaScript and NodeJs. While I don't know that my code is quite idiomatic yet, at least I'm feeling more comfortable with the syntax and some of the build-in functionality.&lt;/p&gt;
&lt;p&gt;One of the things I was excited to use was &lt;code&gt;switch case&lt;/code&gt; statements. In previous Python code, for example, I've used (but tried to avoid!) series of &lt;code&gt;if...else&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mark-in-progress&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;[!aside]
As of version 3.10, Python has a "structural pattern matching" feature introduced by &lt;a href="https://peps.python.org/pep-0636/"&gt;PEP 636&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With JavaScript, I was able to apply similar logic without having a long series of comparison operations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mark-in-progress&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in-progress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mark-done&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mark status is one of [todo | mark-in-progress | mark-done]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the interesting things about this is the requirement to have a &lt;code&gt;break&lt;/code&gt; statement for each case. Without them, the switch case will still work, but the &lt;code&gt;default&lt;/code&gt; case always runs.&lt;/p&gt;
&lt;p&gt;Another fun part of playing with JavaScript ES6 is the ability to use the &lt;code&gt;class&lt;/code&gt; keyword. Coming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/adnanvaldes/task-cli"&gt;&lt;code&gt;task-cli&lt;/code&gt;&lt;/a&gt; is the first project I'm working on from &lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt; as part of their &lt;a href="https://roadmap.sh/backend/projects"&gt;Backend Projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to write it in JavaScript using Node.js rather than defaulting to my go-to of Python because I wanted to learn how those two work, given how ubiquitous they are.&lt;/p&gt;
&lt;p&gt;The major objective here was to get started with JavaScript and NodeJs. While I don't know that my code is quite idiomatic yet, at least I'm feeling more comfortable with the syntax and some of the build-in functionality.&lt;/p&gt;
&lt;p&gt;One of the things I was excited to use was &lt;code&gt;switch case&lt;/code&gt; statements. In previous Python code, for example, I've used (but tried to avoid!) series of &lt;code&gt;if...else&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;[!aside]
As of version 3.10, Python has a "structural pattern matching" feature introduced by &lt;a href="https://peps.python.org/pep-0636/"&gt;PEP 636&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With JavaScript, I was able to apply similar logic without having a long series of comparison operations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-done"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Mark status is one of [todo | mark-in-progress | mark-done]"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the interesting things about this is the requirement to have a &lt;code&gt;break&lt;/code&gt; statement for each case. Without them, the switch case will still work, but the &lt;code&gt;default&lt;/code&gt; case always runs.&lt;/p&gt;
&lt;p&gt;Another fun part of playing with JavaScript ES6 is the ability to use the &lt;code&gt;class&lt;/code&gt; keyword. Coming from Python, this made class construction feel incredibly familiar.  For example, the main class I used in &lt;code&gt;task-cli&lt;/code&gt; was &lt;code&gt;Tasks&lt;/code&gt;, defined as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskPath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/tasks.json`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTasksFile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I'd written this in Python, I would have used very similar syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasksPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tasks.json"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taskList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_tasks_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an unordered, incomplete list of other things I learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where to find JavaScript and Node documentation&lt;/li&gt;
&lt;li&gt;That JavaScript has automatic semi-colon insertion!&lt;/li&gt;
&lt;li&gt;How to use &lt;code&gt;for...of&lt;/code&gt; loops&lt;/li&gt;
&lt;li&gt;General JavaScript syntax&lt;/li&gt;
&lt;li&gt;Using Node and NPM to create a package&lt;/li&gt;
&lt;li&gt;A better understanding of OOP&lt;/li&gt;
&lt;li&gt;How to use a bunch of build-in methods&lt;/li&gt;
&lt;li&gt;That &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;, and &lt;code&gt;.cjs&lt;/code&gt; files are the same but &lt;a href="https://stackoverflow.com/questions/57492546/what-is-the-difference-between-js-and-mjs-files"&gt;different&lt;/a&gt; (they indicate different versions of ECMAScript)&lt;/li&gt;
&lt;li&gt;A thing called &lt;em&gt;Object spreading&lt;/em&gt;, though I have to look into it more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Things I'm happy with&lt;/h2&gt;
&lt;p&gt;From a bird's eye view, I am happy with a &lt;em&gt;simple&lt;/em&gt; project layout. That is to say, I chose to have only two files for the program -  &lt;code&gt;task-cli.msj&lt;/code&gt; and &lt;code&gt;index.mjs&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I can appreciate the utility of having separate files for each concern (I did this, for example, for my &lt;a href="https://github.com/adnanvaldes/apl-api/tree/main/apl_api"&gt;APL-API&lt;/a&gt; project). I suspect that this is a point of critical mass at which doing so makes sense; but for simple projects, the overhead of multiple files, imports flying all over the place, I'm not so sure it makes sense.&lt;/p&gt;
&lt;p&gt;In a way, OOP helps with this. I could have written each method as its own file - &lt;code&gt;addTask.mjs&lt;/code&gt;, &lt;code&gt;updateTask.mjs&lt;/code&gt;, etc - and then imported them all into a single interface. But, in my mind, all of these operations are related, so it made more sense to include them as methods of the &lt;code&gt;Task&lt;/code&gt; class itself.&lt;/p&gt;
&lt;p&gt;The command-line interface was placed into a separate file (&lt;code&gt;index.mjs&lt;/code&gt;) because that is definitely a different concern. While I could have placed the small amount of code at the bottom of the main file, having the user-interface separate from the code logic made far more sense to me.&lt;/p&gt;
&lt;p&gt;In general I am happy with the project itself. It doesn't have to be fancy, and it succeeded in the goal of helping me learn JS. Perhaps in the future I'll come back to it and re-write the whole thing once I'm more proficient!&lt;/p&gt;
&lt;h2&gt;Things I want to improve&lt;/h2&gt;
&lt;p&gt;This section is, in a way, thinking out-loud. As I write this, things become clear in my mind and may end up fixing them. The problems described, therefore, apply to the first version of the app that I finished within the time constraints I gave myself. Some things may be fixed by the time I publish this, some things might not.&lt;/p&gt;
&lt;h3&gt;Argument parsing&lt;/h3&gt;
&lt;p&gt;At the moment, the argument parsing is rather brittle. In a future iteration I'd like more complex logic to manage, clean, and validate the input from users, along with better instructions when the input does not match the expected options.&lt;/p&gt;
&lt;p&gt;For example,  the &lt;code&gt;updateTask&lt;/code&gt; function takes two-arguments: the &lt;code&gt;id&lt;/code&gt; of the item being updated, and the text to insert. It's &lt;em&gt;ideal&lt;/em&gt; usage is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;task-cli&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Update this task"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the task is not found, the program will return a helpful message: &lt;code&gt;Task not found (ID: 2)&lt;/code&gt;. But if it is found, there is nothing stopping the using from adding more arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;task-cli&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"update this task"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ignore this part, I guess"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last argument is simply ignored, which isn't a particularly clean pattern. It would be much better to show an error explaining why that is not a valid operation.&lt;/p&gt;
&lt;h3&gt;listTasks&lt;/h3&gt;
&lt;p&gt;At the moment, &lt;code&gt;listTasks&lt;/code&gt; is a bit complex and messy. For one, I think I could use constants and ternary operators to simplify the code and make the error handling more dynamic.&lt;/p&gt;
&lt;p&gt;So rather than this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;Status: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\nTask ID: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;created &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; | updated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n`&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"started"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[status] must be one of [todo | started | done]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Tasks &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;:\n`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="sb"&gt;`Task: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;Task ID: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\ncreated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; updated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n`&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I should have done this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`[status] must be one of &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" | "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasksToDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tasksToDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"No tasks found."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;tasksToDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;Status: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\nTask ID: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;created &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; | updated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference is the use of the &lt;code&gt;validStatuses&lt;/code&gt; constant the the ternary operator in &lt;code&gt;tasksToDisplay&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let me break this apart:&lt;/p&gt;
&lt;p&gt;The first thing is to have a constant at the beginning of the method that defines valid statuses. This makes it easier to see, rather than scavenging through all the lines of code, and certainly easier to update or expand in the future should I choose to do so. It also means I can use the &lt;code&gt;validStatuses&lt;/code&gt; constant in both error handling and filtering:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`[status] must be one of &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;validStatuses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" | "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next set of lines involves the use of the ternary operator. In Python, a ternary operator is written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;do_this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;do_that&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In JavaScript, the ternary operator is perhaps less human-readable, but has a very similar feel to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;do_this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;do_that&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus, I can create a constant that uses the build-in filtered method if there is a &lt;code&gt;status&lt;/code&gt; option, else simply use the entire list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasksToDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is that the logic to print the list to the terminal does not have to be repeated: whether there is a status or not, there is a single for loop that prints to the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasksToDisplay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Task: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;Status: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;Task ID: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\ncreated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; updated &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;\n`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach also works well for the &lt;code&gt;markTask&lt;/code&gt; method.&lt;/p&gt;
&lt;h3&gt;STATUS&lt;/h3&gt;
&lt;p&gt;Rather than using individual strings everywhere for status - that is, using "todo", "in-progress", and "done" - and then matching them to arguments, it is better design to declare a constant that holds those values and re-use them. &lt;/p&gt;
&lt;p&gt;This way I can modify the arguments themselves, avoid errors due to typos, and expand the list of available options easily. The original code looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//task-cli.mjs&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-done"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.mjs&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mark-done"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;em&gt;much&lt;/em&gt; better design is to declare the options as part of the &lt;code&gt;Tasks&lt;/code&gt; class, and then re-use those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskPath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/tasks.json`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;taskList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTasksFile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Utils&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;IN_PROGRESS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;DONE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"done"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This then allows me to use &lt;code&gt;this.STATUS.DONE&lt;/code&gt;, for example. Should anything need to change, there is &lt;em&gt;one&lt;/em&gt; place to do it.&lt;/p&gt;
&lt;h3&gt;Long switch statement&lt;/h3&gt;
&lt;p&gt;Although I am attempting to keep my code DRY, there are certainly a few places where I repeat myself.  The switch case in &lt;code&gt;index.mjs&lt;/code&gt; is certainly one of those. I guess I was just excited to use switch case!&lt;/p&gt;
&lt;p&gt;Nonetheless, I remember from many years ago I was playing with creating a text-adventure in Python, and rather than creating a series of &lt;code&gt;if...else&lt;/code&gt; statements I used an Object with a hash-map to manage the directions where the player would go. The same design pattern probably works better here as well.&lt;/p&gt;
&lt;p&gt;My first attempt was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;createTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;updateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;deleteTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IN_PROGRESS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"mark-done"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very much Python-like syntax. The issue is that in JavaScript the code above calls all of those functions the moment that the &lt;code&gt;commands&lt;/code&gt; object is defined, rather than using references to those functions to be called later.&lt;/p&gt;
&lt;p&gt;The solution? Arrow functions &lt;a href="https://simpledev.io/lesson/arrow-functions-js/"&gt;without parameters&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"mark-in-progress"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IN_PROGRESS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;"mark-done"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DONE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;taskCLI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, when I run &lt;code&gt;task-cli add "Some task"&lt;/code&gt;, the following will happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The "add" argument is passed as a key to &lt;code&gt;commands&lt;/code&gt; and assigned to &lt;code&gt;command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;command&lt;/code&gt; (in this case, "add") exists, &lt;em&gt;call the value of command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;() =&amp;gt; taskCLI.createTask("Some task")&lt;/code&gt; executes&lt;/li&gt;
&lt;li&gt;The new task is added to the task list and the rest of the code runs&lt;/li&gt;
&lt;/ol&gt;</content><category term="blog"/><category term="js programming"/></entry><entry><title>The Vanished Birds</title><link href="https://adnanvaldes.pages.dev/202301031737.html" rel="alternate"/><published>2023-01-03T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2023-01-03:/202301031737.html</id><summary type="html">&lt;p&gt;&lt;quote&gt;He wanted to warn these children that time was not their friend; that though today might seem special, there would be a tomorrow, and a day after that; that the best-case scenario of a well-spent life was the slow and steady unravelling of the heart’s knot.&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Vanished Birds&lt;/em&gt; is primarily a novel about time and place in a universe worthy of any modern space opera.  The story takes place in a future where advanced technology has allowed humanity to explore and settle other planets, but this progress has also led to the rise of powerful corporations that control and profit from these ventures. Throughout the book, the characters must deal with the effects of this capitalist exploitation, whether it's the harsh working conditions or corporate intrigue. In this way, the book raises important questions about the consequences of unchecked capitalism and the ways it can alienate and exploit individuals.&lt;/p&gt;
&lt;p&gt;The beginning of the novel itself consists of a sort of novella (which as I found out after writing most of this review was originally published as a short story before being incorporated into the larger novel) that sets up the universe, where we follow a farmer named Kaeda, who grew up in the backwater planet of Umbai-V.  The story describes Kaeda's life develop from when he was a child all the way until he is an old man, punctuated by the staccato of an offworld cargo ship arriving every 15 years to collect the harvest and carrying the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;quote&gt;He wanted to warn these children that time was not their friend; that though today might seem special, there would be a tomorrow, and a day after that; that the best-case scenario of a well-spent life was the slow and steady unravelling of the heart’s knot.&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Vanished Birds&lt;/em&gt; is primarily a novel about time and place in a universe worthy of any modern space opera.  The story takes place in a future where advanced technology has allowed humanity to explore and settle other planets, but this progress has also led to the rise of powerful corporations that control and profit from these ventures. Throughout the book, the characters must deal with the effects of this capitalist exploitation, whether it's the harsh working conditions or corporate intrigue. In this way, the book raises important questions about the consequences of unchecked capitalism and the ways it can alienate and exploit individuals.&lt;/p&gt;
&lt;p&gt;The beginning of the novel itself consists of a sort of novella (which as I found out after writing most of this review was originally published as a short story before being incorporated into the larger novel) that sets up the universe, where we follow a farmer named Kaeda, who grew up in the backwater planet of Umbai-V.  The story describes Kaeda's life develop from when he was a child all the way until he is an old man, punctuated by the staccato of an offworld cargo ship arriving every 15 years to collect the harvest and carrying the story's protagonist, Captain Nia Imani.&lt;/p&gt;
&lt;p&gt;Towards the end of the novella we see the inciting incident of the story as we are introduced  to a young boy who seems to have fallen out of the sky into Umbai-V. He is taken care of by Kaeda until Nia arrives on her next rotation and takes him when her ship departs one last time.&lt;/p&gt;
&lt;p&gt;From here on the novel takes us through many different points of view - and thereby through many examples of how time and place affect us and our own decisions. For a time we follow Nia and the boy, as they travel through &lt;em&gt;Pocket Space&lt;/em&gt;, a fold in the universe in which subjective time is much slower than the "objective" time of the universe at large. We meet Fumiko Nakajima, a genius who helped develop humanity's expansion into the universe thousands of years ago, and who is somehow still alive. &lt;/p&gt;
&lt;p&gt;We meet the crew of Nia's ship, as well as various characters who exist in a specific time and then disappear as Nia and the boy continue to make their travels through &lt;em&gt;Pocket Space&lt;/em&gt; at the behest of Nakajima, who believes the boy - with the chosen name of Ahro by this point - will be pivotal in further galactic travel and colonisation.&lt;/p&gt;
&lt;p&gt;As the book continues to develop it is difficult to miss the attention that Jimenez gave to world building. While Nia's crew jumps in and out of &lt;em&gt;Pocket Space&lt;/em&gt; there is always a sense that the universe continues on, that each jump is truly lost time for the people on board the ship, despite of how long their subjective natural lives may be. Jimenez couples this with deep emotional arcs for each character, who each expose very human and very real fears and hopes.&lt;/p&gt;
&lt;p&gt;While reading the book it constantly felt that the question at the heart of the story was always "How does one manage the time we have?" This sentiment is obviously explored through each jump through &lt;em&gt;Pocket Space&lt;/em&gt; as the universe in which the ship was has moved on decades with every travel. All of the characters in the story show that they grieve in some way for lost loves, lost opportunities, lost moments.&lt;/p&gt;
&lt;p&gt;Perhaps the only character in the book that we don't get to understand entirely is time itself. Time is a constant presence in the book, and the characters must find ways to adapt to its passage and the changes it brings. For some, this means trying to hold onto the past and the memories of loved ones, while for others it means finding new ways to connect with the present and move forward. Overall, the book raises important questions about how we deal with loss and the passage of time, and encourages us to consider our own relationship with these themes.&lt;/p&gt;
&lt;p&gt;In real life, people come and go all the time, and our relationships with them can change and evolve over time. Some people may play a significant role in our lives for a while, and then fade into the background as our lives and circumstances change. This can be a natural part of life, and it's something that many people experience at some point. By depicting this in &lt;em&gt;The Vanished Birds&lt;/em&gt;, Jimenez seems to be trying to capture this aspect of life and explore how characters deal with the changing nature of their relationships.&lt;/p&gt;</content><category term="blog"/><category term="blog"/><category term="writing"/><category term="reading"/></entry><entry><title>State of the Servers</title><link href="https://adnanvaldes.pages.dev/202212301843.html" rel="alternate"/><published>2022-12-30T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-12-30:/202212301843.html</id><summary type="html">&lt;p&gt;As the year comes to a close I have 4.5 servers online, with another that is  yet to be built (mostly due to laziness).&lt;/p&gt;
&lt;h3&gt;Trantor&lt;/h3&gt;
&lt;p&gt;My primary server, known as Trantor, has been online for just over a year. Until I build my last server, Trantor is the machine around which the rest of my network is built. It's main purpose is to serve files with NFS to my desktop, though it also runs all my other services (see below) inside VMs managed  by &lt;a href="https://www.proxmox.com/en/"&gt;Proxmox&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It is an older set up, that so far has really reinforced in me the idea of giving old hardware a new life. The CPU is a 4th gen Intel that I inherited from a friend who isn't all that much into computers and wanted help upgrading his set up. This is paired with 24 GB RAM and two 4 TB SMR Western Digital Red HDDs.&lt;/p&gt;
&lt;h3&gt;Anacreon&lt;/h3&gt;
&lt;p&gt;The second server I have is called Anacreon. It's a small Lenovo ThinkCentre with an i5-7500T CPU and also 24 GB RAM. The original idea for this server was to use it for all my VMs and services, leaving Trantor entirely as a file server. However, I decided to upgrade my desktop with a new CPU and a smaller case, which gave me enough spare parts to build a 3rd server. &lt;/p&gt;
&lt;p&gt;As a result, Anacreon's job will eventually be to mostly act as an arbiter and another node in a Proxmox High Availability cluster. I probably have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the year comes to a close I have 4.5 servers online, with another that is  yet to be built (mostly due to laziness).&lt;/p&gt;
&lt;h3&gt;Trantor&lt;/h3&gt;
&lt;p&gt;My primary server, known as Trantor, has been online for just over a year. Until I build my last server, Trantor is the machine around which the rest of my network is built. It's main purpose is to serve files with NFS to my desktop, though it also runs all my other services (see below) inside VMs managed  by &lt;a href="https://www.proxmox.com/en/"&gt;Proxmox&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It is an older set up, that so far has really reinforced in me the idea of giving old hardware a new life. The CPU is a 4th gen Intel that I inherited from a friend who isn't all that much into computers and wanted help upgrading his set up. This is paired with 24 GB RAM and two 4 TB SMR Western Digital Red HDDs.&lt;/p&gt;
&lt;h3&gt;Anacreon&lt;/h3&gt;
&lt;p&gt;The second server I have is called Anacreon. It's a small Lenovo ThinkCentre with an i5-7500T CPU and also 24 GB RAM. The original idea for this server was to use it for all my VMs and services, leaving Trantor entirely as a file server. However, I decided to upgrade my desktop with a new CPU and a smaller case, which gave me enough spare parts to build a 3rd server. &lt;/p&gt;
&lt;p&gt;As a result, Anacreon's job will eventually be to mostly act as an arbiter and another node in a Proxmox High Availability cluster. I probably have zero need for something like this, but I relish the idea of being to unplug any of my computers and still have access to at least a portion of the things I run.&lt;/p&gt;
&lt;h3&gt;RPis&lt;/h3&gt;
&lt;p&gt;When I said I have 4.5 servers online I meant both Trantor and Anacreon as well as two Raspberry Pi 4s and a single Raspberry Pi Zero (the latter counts as a 0.5, I think!). &lt;/p&gt;
&lt;p&gt;As of now, one of my Pi4s is running a matrix server that I set up as an experiment. It doesn't really do much else, and once my Proxmox cluster is up I intend to move the matrix services into their own VM (the thought being that if I get all my friends into Matrix, I want to guarantee as much as I can that the service will be running).&lt;/p&gt;
&lt;p&gt;The second Pi4 is my "network Pi". It sits right on top of my router and uses Pi-Hole and PiVPN to provide ad-blocking, DHCP, and wireguard services. Ideally this Pi should become obsolete when I finally acquire a machine capable of running &lt;a href="https://www.pfsense.org/"&gt;pfSense&lt;/a&gt; for for now this is what I have.&lt;/p&gt;
&lt;p&gt;The last Pi, my Pi Zero, is possibly the most under powered machine I have, yet possibly the one with the greatest up-time of them all. It's entire life is dedicated to an ADS-B antenna I plugged into it and to feeding that data into &lt;a href="https://flightaware.com/adsb/piaware/"&gt;Flight Aware &lt;/a&gt;. It was a fun little project I did when I started to explore playing with computers and, given my profession, has been invaluable given the free Enterprise account ADS-B feeders receive from Flight Aware. &lt;/p&gt;
&lt;h2&gt;Applications&lt;/h2&gt;
&lt;p&gt;When I first migrated to Trantor (from an old laptop) I was really getting into Docker and deploying a lot of applications. This has slowed down significantly as I have reached a point where starting up a new Docker container in itself isn't that interesting anymore, and most of my applications have been fairly stable so far.&lt;/p&gt;
&lt;p&gt;This is it not to say I don't have some changes planned nor that I won't deploy new stuff; indeed, this year I want to re-think how and where I run my services, as well as replace some.&lt;/p&gt;
&lt;p&gt;Docker is the backbone of the things in my network, since most things are deployed as containers. My installation of Docker runs inside a Debian LXC container managed by Proxmox. Although I have seen some concerns online about nested virtualisation, this set up works really well for me (and I don't have any need to GPU pass-through into any of my containers - in fact the only place where I do GPU pass-through is to a dedicated Jellyfin LXC).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.audiobookshelf.org/"&gt;Audiobookshelf&lt;/a&gt; - Audiobook and podcast management, as well as ebook repository&lt;/li&gt;
&lt;li&gt;&lt;a href="https://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; - Ebook  management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitea.io/en-us/"&gt;Gitea&lt;/a&gt; - Git repository&lt;/li&gt;
&lt;li&gt;&lt;a href="https://invidious.io/"&gt;Invidious&lt;/a&gt; - YouTube front-end&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jellyfin.org/"&gt;Jellyfin&lt;/a&gt; - Media streaming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juandjara/jellyseer"&gt;Jellyseer&lt;/a&gt; - Media library management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter.org/"&gt;Jupyter&lt;/a&gt; - Mostly Python playground&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/libreddit/libreddit"&gt;Libreddit&lt;/a&gt; - Reddit front-end&lt;/li&gt;
&lt;li&gt;&lt;a href="https://librespeed.org/"&gt;Librespeed&lt;/a&gt; - Local network speed tests&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lingva.ml/"&gt;Lingva&lt;/a&gt; - Translation software&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matrix.org/"&gt;Matrix | Synapse &lt;/a&gt; - Communications server, Discord alternative&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextcloud.com/"&gt;Nextcloud&lt;/a&gt; - File storage, recipe collection, RSS server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nginxproxymanager.com/"&gt;Nginx Proxy Manager&lt;/a&gt; - Reverse proxy management&lt;/li&gt;
&lt;li&gt;&lt;a href="https://photoprism.app/"&gt;Photoprism&lt;/a&gt; - Photo management and repository&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flightaware.com/adsb/piaware/"&gt;PiAware&lt;/a&gt; - ADS-B antenna&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi-hole.net/"&gt;PiHole&lt;/a&gt; - DNS server and ad-blocker&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.portainer.io/"&gt;Portainer&lt;/a&gt; - Docker management web host&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.snapraid.it/"&gt;SnapRAID&lt;/a&gt; - Drive redundancy&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RSS-Bridge/rss-bridge"&gt;RSS-bridge&lt;/a&gt; - RSS server &lt;a href="https://blog.terminus.earth/202208181152.html"&gt;for my Kindle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://syncthing.net/"&gt;Syncthing&lt;/a&gt; - File synchronisation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://transmissionbt.com/"&gt;Transmission&lt;/a&gt; - Online downloads&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wireguard.com/"&gt;Wireguard&lt;/a&gt; - Home network access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the things I want to work on this year is changing some of these applications. For example, Nextcloud is a great piece of software, especially now that they added support for PHP 8 and thus runs considerably faster. But I don't particularly like the "all-in-one" philosophy, particularly when it is designed for collaboration and multiple users. I am the only person who uses it, and even then I only use a small subset of Nextcloud's features.&lt;/p&gt;
&lt;p&gt;Thus, rather than deploying a monolith with embedded applications, I want to run several separate applications that I can manage individually. Part of this is that I have already started replacing Nextcloud - rather than use it for file synchronisation, I am using Syncthing and I have not looked back at all.&lt;/p&gt;
&lt;p&gt;I also want to have a dedicated recipe management application, such as &lt;a href="https://tandoor.dev/"&gt;Tandoor&lt;/a&gt; - partly because I like the name, and partly because it does recipes much better than Nextcloud's cookbook can. Likewise for the News app; rather than Nextcloud's RSS server I want to use something like &lt;a href="https://tt-rss.org/"&gt;TT-RSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although not set in stone, in 2023 I will also move some of the more critical apps that I have into their own VMs. The idea is that once I have a HA Proxmox cluster I can ensure some more redundancy for these services, such as the Matrix server (which my friends use) and anything related to my network (PiHole and Wireguard), since I need them to be alive to use the internet.&lt;/p&gt;
&lt;p&gt;I also want to lower my dependency on GUIs that manage my configurations - especially those that, once set up, remain generally static or have few changes. I am talking about stuff like Nginx Proxy Manager, which I want to replace with pure Nginx, and Portainer, which I can replace with &lt;a href="https://github.com/jesseduffield/lazydocker"&gt;lazydocker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all there are quite a few changes I have planned for the year, although it is less a process of innovation and more a process of consolidation.&lt;/p&gt;</content><category term="blog"/><category term="sysadmin"/></entry><entry><title>Flappy Bird The Random Update</title><link href="https://adnanvaldes.pages.dev/202212271233.html" rel="alternate"/><published>2022-12-27T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-12-27:/202212271233.html</id><summary type="html">&lt;h3&gt;Random Intervals&lt;/h3&gt;
&lt;p&gt;The first update to the game was to randomise the interval between pipes spawning. &lt;/p&gt;
&lt;p&gt;The logic that spawns new pipes lives inside the &lt;code&gt;update&lt;/code&gt; function of the game's &lt;code&gt;Play&lt;/code&gt; state. It's a fairly simple set-up: if a timer exceeds a preset value, a new pair of pipes is spawned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- in PlayState:update(dt)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;-- modify the last Y coordinate we placed so pipe gaps aren&amp;#39;t too far apart&lt;/span&gt;
    &lt;span class="c1"&gt;-- no higher than 10 pixels below the top edge of the screen,&lt;/span&gt;
    &lt;span class="c1"&gt;-- and no lower than a gap length (90 pixels) from the bottom&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;math.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="c1"&gt;-- add a new pipe pair at the end of the screen at our new Y&lt;/span&gt;
    &lt;span class="nb"&gt;table.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipePairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PipePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;-- reset timer&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My first thought was to simply add a call to &lt;code&gt;math.random()&lt;/code&gt; as part of the &lt;code&gt;if&lt;/code&gt; statement. This was a &lt;em&gt;terrible&lt;/em&gt; idea and made the game absolutely cursed - hundreds if not thousands not pipes were being generated and it made the game unplayable. In hindsight this was obvious:  by placing &lt;code&gt;if self.timer &amp;gt; math.random(2,5) then&lt;/code&gt; as part of the &lt;code&gt;update&lt;/code&gt; loop I was forcing the game to do a check &lt;em&gt;every single frame&lt;/em&gt;, and thereby causing pipes to spawn at incredibly high rates.&lt;/p&gt;
&lt;p&gt;The solution was quite simple. As part of the game state I initialised a variable called &lt;code&gt;self …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Random Intervals&lt;/h3&gt;
&lt;p&gt;The first update to the game was to randomise the interval between pipes spawning. &lt;/p&gt;
&lt;p&gt;The logic that spawns new pipes lives inside the &lt;code&gt;update&lt;/code&gt; function of the game's &lt;code&gt;Play&lt;/code&gt; state. It's a fairly simple set-up: if a timer exceeds a preset value, a new pair of pipes is spawned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- in PlayState:update(dt)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;-- modify the last Y coordinate we placed so pipe gaps aren't too far apart&lt;/span&gt;
    &lt;span class="c1"&gt;-- no higher than 10 pixels below the top edge of the screen,&lt;/span&gt;
    &lt;span class="c1"&gt;-- and no lower than a gap length (90 pixels) from the bottom&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;math.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="c1"&gt;-- add a new pipe pair at the end of the screen at our new Y&lt;/span&gt;
    &lt;span class="nb"&gt;table.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipePairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PipePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;-- reset timer&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first thought was to simply add a call to &lt;code&gt;math.random()&lt;/code&gt; as part of the &lt;code&gt;if&lt;/code&gt; statement. This was a &lt;em&gt;terrible&lt;/em&gt; idea and made the game absolutely cursed - hundreds if not thousands not pipes were being generated and it made the game unplayable. In hindsight this was obvious:  by placing &lt;code&gt;if self.timer &amp;gt; math.random(2,5) then&lt;/code&gt; as part of the &lt;code&gt;update&lt;/code&gt; loop I was forcing the game to do a check &lt;em&gt;every single frame&lt;/em&gt;, and thereby causing pipes to spawn at incredibly high rates.&lt;/p&gt;
&lt;p&gt;The solution was quite simple. As part of the game state I initialised a variable called &lt;code&gt;self.interval&lt;/code&gt; and set it to 2. This means that the first pipe should spawn after 2 seconds of the game starting; when a pipe does spawn I &lt;em&gt;then&lt;/em&gt; reset the timer and randomise the interval. The result is that the interval between pipes is only calculated as each pipe spawns and entirely avoids the issue of having multiple pipes spawn frames apart from each other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;PlayState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;PlayState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;-- modify the last Y coordinate we placed so pipe gaps aren't too far apart&lt;/span&gt;
    &lt;span class="c1"&gt;-- no higher than 10 pixels below the top edge of the screen,&lt;/span&gt;
    &lt;span class="c1"&gt;-- and no lower than a gap length (90 pixels) from the bottom&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                        &lt;span class="nb"&gt;math.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                 &lt;span class="n"&gt;VIRTUAL_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="c1"&gt;-- add a new pipe pair at the end of the screen at our new Y&lt;/span&gt;
    &lt;span class="nb"&gt;table.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipePairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PipePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;-- reset timer&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Random Gaps&lt;/h3&gt;
&lt;p&gt;The next step was to randomise the vertical gap between pipes. On the first version of the game the gap was hard-coded to 90 pixels.  While fun, having different sized gaps makes the game a tad more interesting.&lt;/p&gt;
&lt;p&gt;The way pipes are generated is with logic that lives inside a subclass of each &lt;code&gt;Pipe&lt;/code&gt;, called &lt;code&gt;PipePair&lt;/code&gt; in the code base. When the game is in its &lt;code&gt;Play&lt;/code&gt; state, the state's &lt;code&gt;update&lt;/code&gt; function runs and does the interval check described above. Once a pipe is ready to spawn the code generates the &lt;code&gt;y&lt;/code&gt; coordinate for the pipe (since the gap between pipes is based on that coordinate). This coordinate is also saved to &lt;code&gt;self.lastY&lt;/code&gt;, since we want to ensure that the new gap isn't &lt;em&gt;too&lt;/em&gt; far from the previous one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;PlayState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;math.min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                     &lt;span class="n"&gt;VIRTUAL_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

        &lt;span class="c1"&gt;-- add a new pipe pair at the end of the screen at our new Y&lt;/span&gt;
        &lt;span class="nb"&gt;table.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipePairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PipePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;y&lt;/code&gt; coordinate is then passed to the &lt;code&gt;PipePair&lt;/code&gt; constructor, which itself creates two pipes, one "upper" pipe and one "bottom" pipe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;PipePair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'upper'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'top'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'lower'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bottom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;PIPE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;math.random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because both pipes are based on the upper pipe's &lt;code&gt;y&lt;/code&gt; coordinate the bottom pipe is drawn at &lt;code&gt;y&lt;/code&gt; plus the height of the pipe plus a value that defines the gap between them (the bottom pipe has values &lt;em&gt;added&lt;/em&gt; to it because the &lt;code&gt;xy&lt;/code&gt; coordinate system starts at the top left). To create random sized gaps between pipes the solution was to simply add a random value to the bottom pipe.&lt;/p&gt;</content><category term="blog"/><category term="programming"/><category term="gamedev"/><category term="blog"/><category term="writing"/></entry><entry><title>Pong - The AI Update</title><link href="https://adnanvaldes.pages.dev/202212231346.html" rel="alternate"/><published>2022-12-23T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-12-23:/202212231346.html</id><summary type="html">&lt;p&gt;The first lecture on &lt;a href="https://cs50.harvard.edu/games/2018/"&gt;CS50's introduction to game development&lt;/a&gt; is about creating a small Pong game using &lt;a href="https://love2d.org/"&gt;Love2D&lt;/a&gt;.  While the video runs you through the basics of &lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt; and a step-by -step process of creating a Pong game from scratch, the post-lecture assignment is where things get a bit more interesting.&lt;/p&gt;
&lt;p&gt;What I like the most about these projects, though, is the ability to continue extending them as one pleases. I was able to complete the task (in an exceedingly crude manner) of adding computer controlled movement to one of the paddles in about 5 min. But to do it well took much longer (and by well I mean it's acceptable but still horribly jittery!). I also added a few touches that I thought were kinda fun.&lt;/p&gt;
&lt;h2&gt;AI Update&lt;/h2&gt;
&lt;p&gt;The first problem I tackled was the one directly stated in the project: to create an AI-controlled paddle. Like I said above, my first solution was horrible crude, but &lt;em&gt;technically&lt;/em&gt; it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In love.update(dt) function&lt;/span&gt;
&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, simply setting the right paddle's &lt;code&gt;y&lt;/code&gt; value equal to the ball's is not very interesting (and also makes the game impossible to win). This also doesn't account for the fact that the ball's velocity increases with every bounce, while the paddle's should maintain a constant speed to make the game more challenging.&lt;/p&gt;
&lt;p&gt;To solve this, I made ample use of conditionals. The idea is to check whether the ball is above or bellow the paddle and then to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first lecture on &lt;a href="https://cs50.harvard.edu/games/2018/"&gt;CS50's introduction to game development&lt;/a&gt; is about creating a small Pong game using &lt;a href="https://love2d.org/"&gt;Love2D&lt;/a&gt;.  While the video runs you through the basics of &lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt; and a step-by -step process of creating a Pong game from scratch, the post-lecture assignment is where things get a bit more interesting.&lt;/p&gt;
&lt;p&gt;What I like the most about these projects, though, is the ability to continue extending them as one pleases. I was able to complete the task (in an exceedingly crude manner) of adding computer controlled movement to one of the paddles in about 5 min. But to do it well took much longer (and by well I mean it's acceptable but still horribly jittery!). I also added a few touches that I thought were kinda fun.&lt;/p&gt;
&lt;h2&gt;AI Update&lt;/h2&gt;
&lt;p&gt;The first problem I tackled was the one directly stated in the project: to create an AI-controlled paddle. Like I said above, my first solution was horrible crude, but &lt;em&gt;technically&lt;/em&gt; it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In love.update(dt) function&lt;/span&gt;
&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, simply setting the right paddle's &lt;code&gt;y&lt;/code&gt; value equal to the ball's is not very interesting (and also makes the game impossible to win). This also doesn't account for the fact that the ball's velocity increases with every bounce, while the paddle's should maintain a constant speed to make the game more challenging.&lt;/p&gt;
&lt;p&gt;To solve this, I made ample use of conditionals. The idea is to check whether the ball is above or bellow the paddle and then to move that paddle accordingly. I also added a small check so only move the right paddle if the ball is going towards it, since the ball's direction is always random after being deflected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In love.update(dt) function&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
    &lt;span class="kr"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This worked much better and gave Player 1 a chance to win. But the AI-controlled paddle was horrible jittery: it tried to update it's position constantly such that the centre of the paddle would always try to match the centre of the ball. I tried some far too complicated solutions - such as trying to implement a low-pass filter to smooth out the paddle's movement - but ultimate decided that simply modifying the conditionals to include a buffer would be enough. &lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;PADDLE_SPEED&lt;/code&gt; is constant, the paddle itself displays an acceptable level of jitter when the game starts, but as the ball speeds up the paddle's movement looks smoother and smoother:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In love.update(dt) function&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
    &lt;span class="kr"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;PVP Update&lt;/h2&gt;
&lt;p&gt;The second feature I wanted to add was the ability for a human player to join at any point - much like in fighting arcade games, where the option for a player to jump in was always available. As part of adding this functionality I was also able to include the option for a human player to take &lt;em&gt;either&lt;/em&gt; paddle, rather than always playing as Player 1.&lt;/p&gt;
&lt;p&gt;The result is that the game can be run with one, two, or nil players.&lt;/p&gt;
&lt;p&gt;For this to work I added an empty &lt;code&gt;players&lt;/code&gt; table to &lt;code&gt;love.load()&lt;/code&gt; function. When the game runs, a conditional looks through the &lt;code&gt;players&lt;/code&gt; table to see if it finds  &lt;code&gt;player1&lt;/code&gt;. If it doesn't, the left paddle continues to be controlled automatically. This check happens every single frame. If at any time the the &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; keys are pressed, then &lt;code&gt;player1&lt;/code&gt; is added to the &lt;code&gt;players&lt;/code&gt; table and the computer surrenders control of the left paddle on the following frame. The functionality works exactly the same for player 2.&lt;/p&gt;
&lt;p&gt;Whenever either player reaches 10 points, the &lt;code&gt;players&lt;/code&gt; table is reset to empty, thereby allowing a follow-up game to be played again between AI, PVE, or PVP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In love.update(dt) function&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;string.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;table.concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'player2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
            &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
        &lt;span class="kr"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
            &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PADDLE_SPEED&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="kr"&gt;end&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given that I already have a table which tracks players that join, it was fairly trivial to implement a small &lt;code&gt;Ready Player 1&lt;/code&gt; or &lt;code&gt;Ready Player 2&lt;/code&gt; message on the top of the screen. The logic is to use the &lt;code&gt;players&lt;/code&gt; table and display an invitation for any player &lt;em&gt;not&lt;/em&gt; in the table to join:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- in playerJoin()&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;string.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;table.concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'player2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ready Player 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                          &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                          &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                          &lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                          &lt;span class="s1"&gt;'center'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The trickiest part here was to make sure that the message wasn't just solid text at the top of the screen. I wanted the text to flash slowly as the game continues, like it does in arcade games. My first idea was to change the opacity of the text on every frame, but that would mean changing it, for example, 60 times per second!&lt;/p&gt;
&lt;p&gt;What I did instead was to initialise two variables, &lt;code&gt;timer&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt; at &lt;code&gt;love.load()&lt;/code&gt;. Then, in &lt;code&gt;love.update(dt)&lt;/code&gt;, I used a conditional that checks whether 0.75 seconds have passed since &lt;code&gt;alpha&lt;/code&gt; was last updated.  If true, then &lt;code&gt;alpha&lt;/code&gt; is set to &lt;code&gt;alpha = 1 - alpha&lt;/code&gt;, effectively changing it's value between 0 and 1 every 0.75 seconds. &lt;/p&gt;
&lt;p&gt;Then it's simply a matter of including &lt;code&gt;playerJoin()&lt;/code&gt; in the &lt;code&gt;love.draw()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;.75&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
        &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;playerJoin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;playerJoin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallFont&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;string.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;table.concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'player2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ready Player 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                              &lt;span class="s1"&gt;'center'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;string.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;table.concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'player1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ready Player 1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_WIDTH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                              &lt;span class="s1"&gt;'center'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Future Update&lt;/h2&gt;
&lt;p&gt;The result is a charming little game that is quite fun to play, but not particularly complex. I more have ideas that I want to implement here: boosters, powers, more balls, different game modes etc. But rather than do that now, I'd rather move on to Flappy Bird and once I have a better idea of how things work in Love2D come back to this.&lt;/p&gt;</content><category term="blog"/><category term="gamedev"/><category term="cs"/><category term="programming"/></entry><entry><title>Year of Reflection</title><link href="https://adnanvaldes.pages.dev/202212201918.html" rel="alternate"/><published>2022-12-20T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-12-20:/202212201918.html</id><summary type="html">&lt;p&gt;For 2023, I am looking for more solidity. Something foundational, basic - a framework upon which I can prop up and build other aspects of my life. I suppose that a way to think about it is in the context of goals; far too often I feel like I am wasting time rather than living intentionally, swept up by currents that I often see coming but whose course and final destination I cannot fathom.&lt;/p&gt;
&lt;p&gt;Yet in themselves goals cannot possibly achieve this. At best they are milestone markers of events that occurred prior, up to the point when they are complete, and at worst simply reminders of all the things that were &lt;em&gt;not&lt;/em&gt; accomplished. My interest here is far more organic, to have something that is growing and always present, not in the future or the past.&lt;/p&gt;
&lt;p&gt;Perhaps a different way of thinking about it is in terms of story or narrative. One aspect that attracts me a lot from narrative arcs is that they feel coherent, that there is not wasted breath - think of Chekhov and his gun. There may be specific goals in narrative, but nobody reads fiction because of milestones within the story itself: the narratives are in constant motion.  I understand that life itself is not structured in such a way necessarily, but even an approximation would be well received. &lt;/p&gt;
&lt;p&gt;I know I have been yearning for this for a little while now. In 2022 I experienced a slow drop-off from open world RPG games. For instance …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For 2023, I am looking for more solidity. Something foundational, basic - a framework upon which I can prop up and build other aspects of my life. I suppose that a way to think about it is in the context of goals; far too often I feel like I am wasting time rather than living intentionally, swept up by currents that I often see coming but whose course and final destination I cannot fathom.&lt;/p&gt;
&lt;p&gt;Yet in themselves goals cannot possibly achieve this. At best they are milestone markers of events that occurred prior, up to the point when they are complete, and at worst simply reminders of all the things that were &lt;em&gt;not&lt;/em&gt; accomplished. My interest here is far more organic, to have something that is growing and always present, not in the future or the past.&lt;/p&gt;
&lt;p&gt;Perhaps a different way of thinking about it is in terms of story or narrative. One aspect that attracts me a lot from narrative arcs is that they feel coherent, that there is not wasted breath - think of Chekhov and his gun. There may be specific goals in narrative, but nobody reads fiction because of milestones within the story itself: the narratives are in constant motion.  I understand that life itself is not structured in such a way necessarily, but even an approximation would be well received. &lt;/p&gt;
&lt;p&gt;I know I have been yearning for this for a little while now. In 2022 I experienced a slow drop-off from open world RPG games. For instance: I enjoy &lt;em&gt;Elite Dangerous&lt;/em&gt;, but there is no &lt;em&gt;personal&lt;/em&gt; narrative. Sure one can upgrade ships and the like, and there are definitely galaxy-wide events and stories happening, but as an individual player I feel very static.&lt;/p&gt;
&lt;p&gt;Likewise for other CRPGs. It does not matter to me very much whether my stats go up or down, or what equipment I find. Achievements feel like a waste of time (except that I am often compelled to be completionist!). All of this is irrelevant outside the imperative context of a narrative-driven experience, as far as I'm concerned. Take &lt;em&gt;Spider-Man: Remastered&lt;/em&gt; or &lt;em&gt;Metro: Exodus&lt;/em&gt;. Both games are single-player, open world RPGs. But the RPG aspect is minimal; sure stats upgrade, new guns are acquired, etc. But for the most part I always played with default skins, default load-outs, default everything. I did not care: I was far more interested in having an &lt;em&gt;active&lt;/em&gt; part of the narrative. &lt;/p&gt;
&lt;p&gt;Although I don't think I did too badly in 2022, I do want to make sure I spend more time &lt;em&gt;reflecting&lt;/em&gt; on the books and articles I read. It somehow doesn't feel like enough to simply read a lot, if none of that literature is processed and incorporated somehow (and without active use, much of what I read is quickly forgot).  Ideally, whenever reading I'd like to figure out workflows and processes to incorporate note-taking and knowledge processing into a more active system.&lt;/p&gt;</content><category term="blog"/><category term="health"/><category term="blog"/><category term="writing"/></entry><entry><title>Data</title><link href="https://adnanvaldes.pages.dev/data.html" rel="alternate"/><published>2022-12-07T00:00:00-08:00</published><updated>2024-12-22T13:23:39-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-12-07:/data.html</id><content type="html">&lt;h2&gt;Problem domain vs program&lt;/h2&gt;
&lt;p&gt;In a problem domain we have information regarding how the system works. For example, in a programn about traffic lights the problem domain will include &lt;em&gt;information&lt;/em&gt; about the state of the lights - red, yellow, green. The program itself, however, will &lt;em&gt;represent&lt;/em&gt; the information using &lt;em&gt;data&lt;/em&gt; in the program - for example, representing a red light as the natural 0.&lt;/p&gt;
&lt;p&gt;The inverse of the relationship is that we can &lt;em&gt;interpret&lt;/em&gt; the state of the data, the natural 0 for example, as a red light.&lt;/p&gt;
&lt;h2&gt;Data definitions to describe how we represent data&lt;/h2&gt;
&lt;p&gt;Begin with a data definition that represents the information at hand. For example, for a traffic light problem, we might say the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Data:&lt;/span&gt;

&lt;span class="c1"&gt;;; TLColor is one of:&lt;/span&gt;
&lt;span class="c1"&gt;;; - 0&lt;/span&gt;
&lt;span class="c1"&gt;;; - 1&lt;/span&gt;
&lt;span class="c1"&gt;;; - 2&lt;/span&gt;
&lt;span class="c1"&gt;;; interp. color of a traffic light - 0 is red, 1 yellow, 2 green&lt;/span&gt;
&lt;span class="c"&gt;#;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn-for-tlcolor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Functions:&lt;/span&gt;

&lt;span class="c1"&gt;;; TLColor -&amp;gt; TLColor ; Note how it only consumes a TLColor, which must be [1,2,3]&lt;/span&gt;
&lt;span class="c1"&gt;;; produce next color of traffic light&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check-expect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check-expect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check-expect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; (define (next-color c) 0)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"/></entry><entry><title>A Master of Djinn</title><link href="https://adnanvaldes.pages.dev/202211261850.html" rel="alternate"/><published>2022-11-27T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-11-27:/202211261850.html</id><summary type="html">&lt;p&gt;&lt;quote&gt;Djinn are a lot like the rest of us,” Fatma said. She plucked a book out of the air that came flying, without stopping her stride. “They just want to know the odd things they’re interested in are appreciated.&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;I finished reading P. Djèlí Clark's &lt;em&gt;A Master Of Djinn&lt;/em&gt; last night. I came across it after scanning the 2021 Nebula Awards.  It's not my usual type of novel - for the most part I look for hard sci-fi space operas with big spaceships and galactic scale events.&lt;/p&gt;
&lt;p&gt;I should point out, too, that &lt;em&gt;A Master Of Djinn&lt;/em&gt; had big shoes to fill. It won the award, but one of the other nominations was Arkady Martine's &lt;em&gt;A Desolation called Peace&lt;/em&gt; which is now one of my favourite books and an absolutely fascinating universe.&lt;/p&gt;
&lt;p&gt;Imagine my surprise then when I was maybe 30 pages in and immediately hooked and amazed at the world that Clark created. The story line itself is not particularly complex: we follow an investigator who is trying to solve a murder. &lt;/p&gt;
&lt;p&gt;But the setting!&lt;/p&gt;
&lt;p&gt;The story develops in Cairo in the early 20th century. Around 40 years prior to the events described in the book, a magician called al-Jahiz broke the barrier between this and the magical world. Although initially the world was taken by surprise, the almost half decade since al-Jahiz has made the existence of the djinn fairly routine. They now live, work, and love in the same places as humans do.&lt;/p&gt;
&lt;p&gt;With charming descriptions of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;quote&gt;Djinn are a lot like the rest of us,” Fatma said. She plucked a book out of the air that came flying, without stopping her stride. “They just want to know the odd things they’re interested in are appreciated.&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;I finished reading P. Djèlí Clark's &lt;em&gt;A Master Of Djinn&lt;/em&gt; last night. I came across it after scanning the 2021 Nebula Awards.  It's not my usual type of novel - for the most part I look for hard sci-fi space operas with big spaceships and galactic scale events.&lt;/p&gt;
&lt;p&gt;I should point out, too, that &lt;em&gt;A Master Of Djinn&lt;/em&gt; had big shoes to fill. It won the award, but one of the other nominations was Arkady Martine's &lt;em&gt;A Desolation called Peace&lt;/em&gt; which is now one of my favourite books and an absolutely fascinating universe.&lt;/p&gt;
&lt;p&gt;Imagine my surprise then when I was maybe 30 pages in and immediately hooked and amazed at the world that Clark created. The story line itself is not particularly complex: we follow an investigator who is trying to solve a murder. &lt;/p&gt;
&lt;p&gt;But the setting!&lt;/p&gt;
&lt;p&gt;The story develops in Cairo in the early 20th century. Around 40 years prior to the events described in the book, a magician called al-Jahiz broke the barrier between this and the magical world. Although initially the world was taken by surprise, the almost half decade since al-Jahiz has made the existence of the djinn fairly routine. They now live, work, and love in the same places as humans do.&lt;/p&gt;
&lt;p&gt;With charming descriptions of this magic-influenced world, Clark paints a city that is moving from traditional Egyptian norms and customs to one with "modern" technology: airships and wagons that are the product of traditional building practices and djinn magic, communication systems that are both quaint and wonderful, agencies that seem both mundane and magical. &lt;/p&gt;
&lt;p&gt;The events of the book occur in 1912, a few weeks before a major peace summit that will be held in Cairo. By this time, Egypt has become a world power due to its access to magic and djinn, but tensions and wars are still rising as various European countries grapple for power over their colonies (and envy the magic that has allowed Egypt to develop).&lt;/p&gt;
&lt;p&gt;We follow Fatma el-Sha'arawi, one of the few women who work in the Ministry of Alchemy, Enchantments, and Supernatural Entities. She is tasked with investigating the murder of a secret brotherhood dedicated to a al-Jahiz, who is said to have mysteriously returned. Agent Fatma joins forces with her lover, Siti, and her partner, Agent Haida, as they move through a fast-paced and action filled mystery in search for answers.&lt;/p&gt;
&lt;p&gt;One of the places where the book really shines is in the dialogue. Agent Fatma is wonderfully sarcastic, Agent Haida counteracts as an incredibly intelligent investigator, while the rest of the characters all provide some balance to the story. Much of what people say allows you to be further immersed in the world Clark created: from casual references to magic, to world issues, to the transitioning of traditional Egyptian norms regarding women, to the existence of English and other European leaders in a Cairo that is no longer a subjugated colony.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A Master of Djinn&lt;/em&gt; really hits the nail with a historical fantasy novel. Reading it really feels like there isn't anything superfluous being included in the book. We are presented with a story full of depth that hits every note - even for people like me, who are not in the habit of reading fantasy.  &lt;/p&gt;</content><category term="blog"/><category term="blog"/><category term="reading"/><category term="writing"/></entry><entry><title>Setting up this blog with NGINX</title><link href="https://adnanvaldes.pages.dev/202211261450.html" rel="alternate"/><published>2022-11-26T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-11-26:/202211261450.html</id><summary type="html">&lt;p&gt;One of the main goals I have for this goal is to make it as &lt;strong&gt;friction&lt;/strong&gt;-less as possible to write. In an ideal world, I would be able to open my text editor (I use &lt;a href="https://neovim.io/"&gt;nvim&lt;/a&gt; and &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;), write some content and then, with a single command, publish.&lt;/p&gt;
&lt;p&gt;I looked at solutions like &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; and &lt;a href="https://wordpress.com/"&gt;WordPress&lt;/a&gt;, but they are both, well, &lt;em&gt;too much&lt;/em&gt;. Or rather, they are designed, as per Ghost's tagline, for "the creator economy". That is, they include analytics, membership, revenue charts, etc. etc. I want none of that.&lt;/p&gt;
&lt;p&gt;I just want a static page with a bunch of html. Zero bells and whistles.&lt;/p&gt;
&lt;p&gt;So the next option was to either build something with a static site generator like &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; (which is what I'm using now!) or host the blog on a site like &lt;a href="https://bearblog.dev/"&gt;Bear Blog&lt;/a&gt; or &lt;a href="https://writefreely.org/"&gt;Writefreely&lt;/a&gt;. The latter two are pretty cool, too! Bear Blog is the essence of simplicity (and part of the inspiration for the design of this blog), while Writefreely's integration with the Fediverse is awesome. Unfortunately, the design is pretty set in stone, hosting images is more difficult, and to publish one has to place their text on a browser.&lt;/p&gt;
&lt;p&gt;For context, the way this blog was deployed before was through Cloudflare Pages. The html and css files are generated on my computer and then I had to manually upload a folder with all the html to the project page. Far too tedious, in my opinion.&lt;/p&gt;
&lt;p&gt;What I've done instead is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the main goals I have for this goal is to make it as &lt;strong&gt;friction&lt;/strong&gt;-less as possible to write. In an ideal world, I would be able to open my text editor (I use &lt;a href="https://neovim.io/"&gt;nvim&lt;/a&gt; and &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;), write some content and then, with a single command, publish.&lt;/p&gt;
&lt;p&gt;I looked at solutions like &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; and &lt;a href="https://wordpress.com/"&gt;WordPress&lt;/a&gt;, but they are both, well, &lt;em&gt;too much&lt;/em&gt;. Or rather, they are designed, as per Ghost's tagline, for "the creator economy". That is, they include analytics, membership, revenue charts, etc. etc. I want none of that.&lt;/p&gt;
&lt;p&gt;I just want a static page with a bunch of html. Zero bells and whistles.&lt;/p&gt;
&lt;p&gt;So the next option was to either build something with a static site generator like &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; (which is what I'm using now!) or host the blog on a site like &lt;a href="https://bearblog.dev/"&gt;Bear Blog&lt;/a&gt; or &lt;a href="https://writefreely.org/"&gt;Writefreely&lt;/a&gt;. The latter two are pretty cool, too! Bear Blog is the essence of simplicity (and part of the inspiration for the design of this blog), while Writefreely's integration with the Fediverse is awesome. Unfortunately, the design is pretty set in stone, hosting images is more difficult, and to publish one has to place their text on a browser.&lt;/p&gt;
&lt;p&gt;For context, the way this blog was deployed before was through Cloudflare Pages. The html and css files are generated on my computer and then I had to manually upload a folder with all the html to the project page. Far too tedious, in my opinion.&lt;/p&gt;
&lt;p&gt;What I've done instead is to continue to generate the site with Pelican, but instead I host it on a VM in my server with nginx. This sits behind another nginx instance that acts as a reverse proxy for requests made through Cloudflare. Here is how I did it:&lt;/p&gt;
&lt;h2&gt;Configuring NGINX&lt;/h2&gt;
&lt;h3&gt;Config file&lt;/h3&gt;
&lt;p&gt;To serve the files I set up a VM with Debian 11 as an OS (in the future I will move this into a Docker container) and a single user in addition to &lt;code&gt;root&lt;/code&gt;.  I also installed nginx from the Debian repository by running &lt;code&gt;sudo apt install nginx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then I created a configuration file for my site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/nginx/sites-available/
sudo&lt;span class="w"&gt; &lt;/span&gt;nvim&lt;span class="w"&gt; &lt;/span&gt;terminus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;terminus&lt;/code&gt; file, I included a very simple config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;server {
        listen 80;

        root /home/{YOUR_USER}/terminus/;
        server_name blog.terminus.earth;

        location / {
                try_files $uri $uri/ =404;
        }

        location /theme {
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this does is create a server that listens on port 80. That is, it is only an HTTP server (the HTTPS and certificates are all handled by my reverse proxy).&lt;/p&gt;
&lt;p&gt;The next line defines where the root of my website is located: in this case it is at &lt;code&gt;/home/{MY_USER}/terminus/&lt;/code&gt;. The &lt;code&gt;location /&lt;/code&gt; block establishes that the server should try looking for files at the root of the file structure and then for sub directories, otherwise return a &lt;code&gt;404 Error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When I first deployed this configuration, however, the site would not load any of my CSS files (which are at &lt;code&gt;..terminus/theme/styles.css&lt;/code&gt;).  I was very confused, too, because on my browser all I would see was a &lt;code&gt;503 Timeout&lt;/code&gt; error. Turns out that even with &lt;code&gt;$uri/&lt;/code&gt; set up as part of the location, the sub folder  was inaccessible. &lt;/p&gt;
&lt;p&gt;I realized what the issue was once I read the NGINX logs with &lt;code&gt;sudo cat /var/log/nginx/error.log&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1983&lt;/span&gt;&lt;span class="n"&gt;#1983&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;
&lt;span class="ss"&gt;"/home/{MY_USER}/terminus/theme/"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;forbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;192.168.0.150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nl"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;192.168.0.30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"GET /theme/ HTTP/1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;host&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="ss"&gt;"blog.terminus.earth"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Turns out that while I told NGINX to look into the directory, the clients were not given permission to go there (confusing, too, since this is a forbidden error, not necessarily a timeout!). The solution was to add the second &lt;code&gt;location&lt;/code&gt; line to my configuration file to explicitly allow clients access to the endpoints at &lt;code&gt;theme/&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Enable the site&lt;/h3&gt;
&lt;p&gt;The configuration file here lives at &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt;. But we want to make sure the site is &lt;em&gt;enabled&lt;/em&gt;. As a result, I ran the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;/etc/nginx/sites-enabled/default
sudo&lt;span class="w"&gt; &lt;/span&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/etc/nginx/sites-available/terminus&lt;span class="w"&gt; &lt;/span&gt;/etc/nginx/sites-enabled/terminus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This removes the default site from NGINX and uses a symlink to ensure the available site and the enabled side configs are the exact same.&lt;/p&gt;
&lt;p&gt;Then, to enable the server I simply ran:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;nginx
sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Accessing site data&lt;/h2&gt;
&lt;p&gt;I upload my html files to my server using &lt;code&gt;rsync&lt;/code&gt;. This works well, except for one problem: the files themselves are owned by my user, but the user on the server that reads the files is &lt;code&gt;www-data&lt;/code&gt;.  With no further changes, NGINX was unable to read my files and was therefore displaying broken stuff on my browser.&lt;/p&gt;
&lt;p&gt;My immediate thought was, "ah! Ok so I can just &lt;code&gt;chown -R&lt;/code&gt; the entire directory and change ownership to &lt;code&gt;www-data&lt;/code&gt;". And this worked, until I tried to upload more files.&lt;/p&gt;
&lt;p&gt;Obviously I didn't want to change the ownership of those files every time  I wrote something. The solution I came up with was to make my user a member of the &lt;code&gt;www-data&lt;/code&gt; group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo usermod -g www-data {MY_USER}
sudo chmod 644 terminus/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this was in place, I was able to immediately write this post, rsync it to my server, and have it available within seconds.&lt;/p&gt;</content><category term="blog"/><category term="blog"/><category term="sysadmin"/><category term="writing"/></entry><entry><title>Consuming feeds</title><link href="https://adnanvaldes.pages.dev/202208181152.html" rel="alternate"/><published>2022-08-28T00:00:00-07:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-08-28:/202208181152.html</id><summary type="html">&lt;p&gt;Until recently, I have been consuming RSS feeds by way of a self-hosted &lt;a href="https://nextcloud.com/"&gt;Nextcloud&lt;/a&gt; instance that delivers them to my phone. The problem is that using a mobile platform invariably leads to a more shallow reading experience - when scrolling through a large set of feeds it starts to feel more like a news aggregator site like Reddit and less like a curated feed (though I suppose it doesn't help that I subscribe to the front page of &lt;a href="https://news.ycombinator.com"&gt;Hacker News&lt;/a&gt;). I am far less likely to take notes or really remember what I read, and instead browsing these feeds turned into a time wasting activity more than anything. &lt;/p&gt;
&lt;p&gt;To combat this, I started subscribing to more and more individual blogs and long form journalism sites, such as &lt;a href="https://www.theguardian.com/news/series/the-long-read"&gt;The Guardian Long Read&lt;/a&gt; and &lt;a href="https://longreads.com"&gt;Longreads&lt;/a&gt;. I enjoy the format a lot more and it helps my feeds populate with non-technology commentary. What I don't like is mobile screens and computer monitors: I find these screens exhausting when trying to read for long periods of time, they have glare and, worse, they are incredibly distracting.&lt;/p&gt;
&lt;p&gt;The solution, of course, is to use an e-reader.&lt;/p&gt;
&lt;p&gt;The end goal of this little project was to have remote access to long form RSS feeds on my kindle without adding too much friction. To work within these constraints I could not rely on manual updates or on connecting my kindle to my desktop. I just wanted the feeds to &lt;em&gt;magically&lt;/em&gt; appear on my kindle's library, ready to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Until recently, I have been consuming RSS feeds by way of a self-hosted &lt;a href="https://nextcloud.com/"&gt;Nextcloud&lt;/a&gt; instance that delivers them to my phone. The problem is that using a mobile platform invariably leads to a more shallow reading experience - when scrolling through a large set of feeds it starts to feel more like a news aggregator site like Reddit and less like a curated feed (though I suppose it doesn't help that I subscribe to the front page of &lt;a href="https://news.ycombinator.com"&gt;Hacker News&lt;/a&gt;). I am far less likely to take notes or really remember what I read, and instead browsing these feeds turned into a time wasting activity more than anything. &lt;/p&gt;
&lt;p&gt;To combat this, I started subscribing to more and more individual blogs and long form journalism sites, such as &lt;a href="https://www.theguardian.com/news/series/the-long-read"&gt;The Guardian Long Read&lt;/a&gt; and &lt;a href="https://longreads.com"&gt;Longreads&lt;/a&gt;. I enjoy the format a lot more and it helps my feeds populate with non-technology commentary. What I don't like is mobile screens and computer monitors: I find these screens exhausting when trying to read for long periods of time, they have glare and, worse, they are incredibly distracting.&lt;/p&gt;
&lt;p&gt;The solution, of course, is to use an e-reader.&lt;/p&gt;
&lt;p&gt;The end goal of this little project was to have remote access to long form RSS feeds on my kindle without adding too much friction. To work within these constraints I could not rely on manual updates or on connecting my kindle to my desktop. I just wanted the feeds to &lt;em&gt;magically&lt;/em&gt; appear on my kindle's library, ready to be read anywhere in the world.&lt;/p&gt;
&lt;h4&gt;Generating feeds&lt;/h4&gt;
&lt;p&gt;Many websites offer RSS feeds that are unfortunately truncated or deliver nothing but summaries with links to the appropriate website, if they offer RSS delivery at all. I find this distasteful as a matter of principle. More practically, however, it makes it far more difficult to read on the kindle - there is web browser that comes with the device, but it's not very well suited to load all the bloat that comes with many modern sites.&lt;/p&gt;
&lt;p&gt;Fortunately, I am not the only one with this issue. The good people at &lt;a href="https://rss-bridge.github.io/rss-bridge/"&gt;RSS-Bridge&lt;/a&gt; have created software that will generate both RSS and Atom feeds "for websites that don't have one". Or, as is my case, for websites that have poor feeds. To quote the RSS-Bridge repository:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_Dear so-called "social" websites._&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Your catchword is "share", but you don't want us to share. You want to keep us within your walled gardens. That's why you've been removing RSS links from webpages, hiding them deep on your website, or removed feeds entirely, replacing it with crippled or demented proprietary API. **FUCK YOU.**&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;You're not social when you hamper sharing by removing feeds. You're happy to have customers creating content for your ecosystem, but you don't want this content out - a content you do not even own. Google Takeout is just a gimmick. We want our data to flow, we want RSS or Atom feeds.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;We want to share with friends, using open protocols: RSS, Atom, XMPP, whatever. Because no one wants to have _your_ service with _your_ applications using _your_ API force-feeding them. Friends must be free to choose whatever software and service they want.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;We are rebuilding bridges you have willfully destroyed.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get your shit together: Put RSS/Atom back in.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get this working I deployed RSS-Bridge with Docker on my server. Although it runs well by default, the documentation is not very clear on how to configure specific services. Turns out that custom configurations must be placed in a &lt;code&gt;/config&lt;/code&gt; folder - the same folder that can be mounted by the container itself.&lt;/p&gt;
&lt;p&gt;However, the directory is empty  when first deployed and I couldn't find any information on &lt;em&gt;where&lt;/em&gt; the rest of the configuration files could be found. The RSS-Bridge documentation simply says that &lt;code&gt;A default configuration file ("config.default.ini.php") is shipped with RSS-Bridge.&lt;/code&gt;  After digging around the container I noticed that all the relevant files were located at &lt;code&gt;/app&lt;/code&gt; (I tried adding that folder as a mount point, but this just led to a host of errors  I don't care to repeat here). By simply copying and editing the relevant config files into  &lt;code&gt;/config&lt;/code&gt;, RSS-Bridge was now set up.&lt;/p&gt;
&lt;p&gt;Some feeds, such as those from The Guardian, also include links to their podcast. And much as I love long read podcasts, those are obviously unsuitable for the kindle. The solution then was to generate the individual feeds from whatever source I want and then re-run &lt;em&gt;those&lt;/em&gt; feeds through the Filter feed in RSS-Bridge. &lt;/p&gt;
&lt;h4&gt;Downloading feeds&lt;/h4&gt;
&lt;p&gt;With the feeds successfully generated all that was left to do was to have them formatted correctly and then place them in my kindle. Frankly, this was the easy part: Calibre is already able to fetch various feeds with its "News" function. Of course, for this to work Calibre needs to be running, and one of my constraints was that I wanted this to work from anywhere in the world. The obvious solution was to add another service to the Docker RSS stack.&lt;/p&gt;
&lt;p&gt;Another nifty feature that ships with Calibre is the ability to email books to an Amazon kindle address: by sending a document to an address that you specify on Amazon's website you can have new content show up if you're connected to the internet. Combining this with Calibre's "News" feature and scheduled download, I now have a regular feed update that I can read on an e-ink display.&lt;/p&gt;</content><category term="blog"/><category term="blog"/><category term="writing"/></entry><entry><title>The personal web</title><link href="https://adnanvaldes.pages.dev/20220706.html" rel="alternate"/><published>2022-07-06T00:00:00-07:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-07-06:/20220706.html</id><summary type="html">&lt;p&gt;I am very keen on the idea of a decentralised web, insofar as that is possible (centralisation due to ISPs, data centres, DNS servers, etc. notwithstanding), and while I love the &lt;em&gt;idea&lt;/em&gt; of 100% peer-to-peer communication, I don't believe it is a feasible way to organise the web. I don't really have the technical expertise to argue the details of crypto/blockchain-based internets, but from what I see regularly on Hacker News I am certainly not a proponent of those technologies for this particular issue.&lt;/p&gt;
&lt;p&gt;I should point out that this isn't entirely about privacy - though I do care about being able to maintain the privacy of internet users - nor is it entirely about P2P protocols - but I do think those are pretty cool! Rather, what I want to see is a way to enable access to an internet that has personality instead of branding, that is organic instead of defined by market studies and A/B testing.&lt;/p&gt;
&lt;p&gt;Given how much technology is in our lives now, how defined by it we have become, I suspect we would all be better off being at least somewhat familiar with the workings of the internet; in particular, with how we are able to express ourselves on this medium without explicit reliance on third-party controls. What I mean by this is depending on TikTok, Google, Microsoft, etc. for access to the largest communication network in existence seems like a poor choice.&lt;/p&gt;
&lt;p&gt;Not that I would like to propose we all become experts in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am very keen on the idea of a decentralised web, insofar as that is possible (centralisation due to ISPs, data centres, DNS servers, etc. notwithstanding), and while I love the &lt;em&gt;idea&lt;/em&gt; of 100% peer-to-peer communication, I don't believe it is a feasible way to organise the web. I don't really have the technical expertise to argue the details of crypto/blockchain-based internets, but from what I see regularly on Hacker News I am certainly not a proponent of those technologies for this particular issue.&lt;/p&gt;
&lt;p&gt;I should point out that this isn't entirely about privacy - though I do care about being able to maintain the privacy of internet users - nor is it entirely about P2P protocols - but I do think those are pretty cool! Rather, what I want to see is a way to enable access to an internet that has personality instead of branding, that is organic instead of defined by market studies and A/B testing.&lt;/p&gt;
&lt;p&gt;Given how much technology is in our lives now, how defined by it we have become, I suspect we would all be better off being at least somewhat familiar with the workings of the internet; in particular, with how we are able to express ourselves on this medium without explicit reliance on third-party controls. What I mean by this is depending on TikTok, Google, Microsoft, etc. for access to the largest communication network in existence seems like a poor choice.&lt;/p&gt;
&lt;p&gt;Not that I would like to propose we all become experts in IT or networking wizards. Far from it: learning how to host a simple website - such as this blog - on a Raspberry Pi or a small node on a Linode VPS is a relatively small time investment for near complete control of at least one slice of our digital presence. There are even companies, such as KubeSail, that manage and integrate the deployment of web applications on homeservers.&lt;/p&gt;
&lt;p&gt;Ultimately, what I want is for each of us to have control over our identity and how that identity is expressed. By hosting or managing our own slice of the internet, that identity can truly come forth, change, and evolve - not just by the content itself but by the aesthetic of the site, by the way we interact with it (as opposed to the algorithm-driven way in which we interact with, say, Facebook). After all, I imagine most of us are interested in &lt;em&gt;people&lt;/em&gt; (hence the popularity of social networks) and not so much in corporations. What if instead of being told who we are and what we want by algorithms and corporations with vast resources we could simply choose who we want to be by manner of expressing that very idea?&lt;/p&gt;
&lt;p&gt;For example, in making this very blog I spent a couple of days looking around for frameworks or guidance that could help me deploy what I want. There are many guides and walkthroughs on blog creation, but the vast majority of them have titles such as "How to Start a Blog (and Make Money)" or "How to Motivate Yourself For Blogging When No One Knows You". Invariably, these guides offer guidance on free services that allow the inclusion of various analytics, advertisements and constant eye on audience growth and revenue creation. Indeed, even the very frameworks that are offered for those who are more tech savvy are often &lt;em&gt;platforms&lt;/em&gt;, such as &lt;a href="ghost.org"&gt;Ghost&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I understand the need for such services when trying to create a presence online for a particular business, for marketing of a specific service, etc. However, finding a reliable and simply way to express &lt;em&gt;oneself&lt;/em&gt; online without reliance on third-parties, without trying to get more subscribers or increase membership sign up, is surprisingly difficult.&lt;/p&gt;
&lt;p&gt;I don't believe that the community I'd like to see would be very difficult to create. A community like that would not be too difficult to create - using Matrix protocols for instant communication, RSS feeds for expressions that want more permanence. Running servers on Linode, or having them managed by KubeSail can help close the gap - indeed, publishing via &lt;a href="https://indieweb.org/"&gt;the Indie Web&lt;/a&gt; is a very good solution. &lt;/p&gt;
&lt;p&gt;All we have to do is focus on ourselves and others, rather than on products and companies.&lt;/p&gt;</content><category term="blog"/><category term="blog"/><category term="writing"/></entry><entry><title>Learning a Language</title><link href="https://adnanvaldes.pages.dev/202204251226.html" rel="alternate"/><published>2022-04-25T00:00:00-07:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-04-25:/202204251226.html</id><content type="html">&lt;h1&gt;Five different things&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Syntax: how to write language constructs?&lt;/li&gt;
&lt;li&gt;Semantics: What to programs mean? How do the typechecking and evaluation rules work?&lt;/li&gt;
&lt;li&gt;Idioms: What are typical patterns for using language features to express your computation?&lt;ol&gt;
&lt;li&gt;It's not enough to iknow that if/else expressoins work; we need to know &lt;em&gt;when&lt;/em&gt; to use them to represent and recognize patterns of use.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Libraries: What facilities does the language (or a well-known project) provide as "standard"? (eg. file access, data structures, etc.)&lt;/li&gt;
&lt;li&gt;Tools: What do language implementations provide to make your job easier? (eg. REPL, debugger, code formatter, etc)&lt;/li&gt;
&lt;/ol&gt;</content><category term="blog"/><category term="language"/></entry><entry><title>Precision Flight Controls</title><link href="https://adnanvaldes.pages.dev/202204191535.html" rel="alternate"/><published>2022-04-19T00:00:00-07:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-04-19:/202204191535.html</id><summary type="html">&lt;h2&gt;Installing Win10 on old hardware&lt;/h2&gt;
&lt;p&gt;Originally Win 7 Pro installed on two WD Blue HDDs. Target set up: Windows 10 on a WD Blue 500G SSD to speed up boot times.&lt;/p&gt;
&lt;p&gt;Problems encountered: old motherboard, no driver support, "missing media drivers", "no OS found" after install.&lt;/p&gt;
&lt;p&gt;Solution: Install Windows 10 on SSD via a different motherboard and configure. Then plug SSD to old computer&lt;/p&gt;
&lt;h2&gt;Setting up X-Plane&lt;/h2&gt;
&lt;p&gt;X-Plane 11 installation was straightforward. NVIDIA drivers needed to be updated: GeForce GTX 750 Ti installed with drivers version 4xx. Update to 512.15.&lt;/p&gt;
&lt;p&gt;X-Plane appears to work and boots well. However, there is concern over COM port usability for hardware flight controls. Install PFC drivers; need to compare FSUIPC and XUIPC -&amp;gt; specifically, check if the later depends on the former, and whether it is required. Nonetheless, download all DLL as a precaution.&lt;/p&gt;
&lt;p&gt;Hardware was working before, so plug in old HDDs and browse for relevant files. Copy Custom Maps into X-Plane, copy PFCTest software to manage COM port. Suspect ignition issue at hardware level related to this or mismatch of hardware inputs and &lt;code&gt;datarefs&lt;/code&gt; assignment.&lt;/p&gt;
&lt;h3&gt;Testing network communication&lt;/h3&gt;
&lt;p&gt;Install X-Plane 11 on Arch Linux to set up instructor station. Concerns: OS incompatibility.&lt;/p&gt;
&lt;h3&gt;Running on Linux&lt;/h3&gt;
&lt;p&gt;Installer fails due to missing &lt;code&gt;libGLU.so.1&lt;/code&gt;. Name is apparently outdated, and often just a symlink for &lt;code&gt;glu&lt;/code&gt;. To install, &lt;code&gt;yay -S glu&lt;/code&gt;; after a .14 MiB download, X-Plane installer runs.&lt;/p&gt;
&lt;h2&gt;April 20th, 2022&lt;/h2&gt;
&lt;p&gt;After installing X-Plane on both computers and plugging all hardware in, including …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installing Win10 on old hardware&lt;/h2&gt;
&lt;p&gt;Originally Win 7 Pro installed on two WD Blue HDDs. Target set up: Windows 10 on a WD Blue 500G SSD to speed up boot times.&lt;/p&gt;
&lt;p&gt;Problems encountered: old motherboard, no driver support, "missing media drivers", "no OS found" after install.&lt;/p&gt;
&lt;p&gt;Solution: Install Windows 10 on SSD via a different motherboard and configure. Then plug SSD to old computer&lt;/p&gt;
&lt;h2&gt;Setting up X-Plane&lt;/h2&gt;
&lt;p&gt;X-Plane 11 installation was straightforward. NVIDIA drivers needed to be updated: GeForce GTX 750 Ti installed with drivers version 4xx. Update to 512.15.&lt;/p&gt;
&lt;p&gt;X-Plane appears to work and boots well. However, there is concern over COM port usability for hardware flight controls. Install PFC drivers; need to compare FSUIPC and XUIPC -&amp;gt; specifically, check if the later depends on the former, and whether it is required. Nonetheless, download all DLL as a precaution.&lt;/p&gt;
&lt;p&gt;Hardware was working before, so plug in old HDDs and browse for relevant files. Copy Custom Maps into X-Plane, copy PFCTest software to manage COM port. Suspect ignition issue at hardware level related to this or mismatch of hardware inputs and &lt;code&gt;datarefs&lt;/code&gt; assignment.&lt;/p&gt;
&lt;h3&gt;Testing network communication&lt;/h3&gt;
&lt;p&gt;Install X-Plane 11 on Arch Linux to set up instructor station. Concerns: OS incompatibility.&lt;/p&gt;
&lt;h3&gt;Running on Linux&lt;/h3&gt;
&lt;p&gt;Installer fails due to missing &lt;code&gt;libGLU.so.1&lt;/code&gt;. Name is apparently outdated, and often just a symlink for &lt;code&gt;glu&lt;/code&gt;. To install, &lt;code&gt;yay -S glu&lt;/code&gt;; after a .14 MiB download, X-Plane installer runs.&lt;/p&gt;
&lt;h2&gt;April 20th, 2022&lt;/h2&gt;
&lt;p&gt;After installing X-Plane on both computers and plugging all hardware in, including the PFC MDF, started up X-Plane.&lt;/p&gt;
&lt;p&gt;Initial notes: 
1) computers were unable to send data to each other, 
2) visual computer had trouble displaying all menus and a correct FOV, 
3) flight model was completely out of whack (aircraft moving scholastically around space, in all directions).
4) no scenery was visible (only water around runways), 
5) Flight controls not working as expected:
    1)  poor left roll control, 
    2) excessive pitch sensitivity,
    3) starters seem to be on at all times
    4) only pitch control when battery is off&lt;/p&gt;
&lt;p&gt;Solutions:&lt;/p&gt;
&lt;p&gt;1) Reset networking configuration on both visual and master computers. Ensure roles are specified, and lock view on visual computer to master. If needed, add IP address and ensure Wi-Fi is off.&lt;/p&gt;
&lt;p&gt;2) On external visuals computer, adjust settings to include every monitor (need to scroll all the way down for horizontal slider). Set each monitor to "default resolution for this monitor" and select option for displaying external views only (no panel). Set FOV to required value - this can be done experimentally - a FOV of 45 degrees mean the side monitors still seemed to be looking forward. Adjust with lateral offset views on same menu.
3) Ensure correct aircraft model is loaded on both computers. Aircraft models are located in &lt;code&gt;$ ../X-Plane/Aircraft&lt;/code&gt;.
4) Global scenery is available with the purchase of a professional license. Alternatively, it is possible to download specific geographic areas under Custom Areas - untested.
5) Calibrate controls under settings, User Profiles:
    1) Set each axis to center, min, and max
    2) Adjust pitch, roll, and yaw rate sliders and acceleration profiles
    3) According to various X-Plane forum posts, XP11 is incompatible with serial port connections. It does appear that there is poor support for COM-connected controls, given the lack of settings and auto-discovery options (see 1 and 2 for small fixes)&lt;/p&gt;
&lt;h2&gt;May 19, 2022&lt;/h2&gt;
&lt;p&gt;Using Elite Datarefs plugin was inconclusive. Suspect the plugin is designed for a COM panel but does not address the use of yoke/rudder pedal combinations.&lt;/p&gt;
&lt;p&gt;Using the Precision Flight Controls testing software we were able to ascertain which signals are being delivered to the computer under different conditions:&lt;/p&gt;
&lt;p&gt;1) At all times the left ignition/mag switch is inop. The right ign/mag seems to deliver information to the master computer, although it maintains a state of Start L+R at all times
2) The left brake was unable to be fined tuned: functioned as an on/off switch rather than having access to a spectrum of values.
3) The yoke and rudder pedals worked normally, except when the battery switch was turned off. In that scenario, no data was received by master computer - explains why with battery of in flight we lost all roll and yaw control. Suspect improper connection set up or hardware fault.&lt;/p&gt;
&lt;h3&gt;Specific fixes for 5.3 above&lt;/h3&gt;
&lt;p&gt;According to the XP11 desktop manual, a serial port can be set up by adjusting Dataref Read/Write parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;###&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Serial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Flight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Instruments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Up&lt;/span&gt;

&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;flight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;instruments&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hardware&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;plug&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;datarefs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="err"&gt;‑&lt;/span&gt;&lt;span class="nx"&gt;Plane&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;drive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Dataref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;COM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;baud&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;choose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;datarefs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;They&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dataref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_array_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fuel_pump_on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;simply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//x-plane.com/manuals/desktop/index.html#configuringflightcontrols&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some people in forums have suggested using HID drivers; however, these appear to be geared towards serial to USB adaptor set ups.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;downloaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XPUIPC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equivalent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FSUIPC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;With&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;automatically&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recognised&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aircraft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can also test using PFC serial test utilities and other legacy software: https://flypfc.com/legacy/&lt;/p&gt;
&lt;p&gt;https://flypfc.com/wp-content/uploads/support/Set_Up_Guide_Serial_Avionics_XPlane9.pdf&lt;/p&gt;
&lt;p&gt;https://flypfc.com/wp-content/uploads/support/Serial_CATIII_%20and_X-Plane_9_%20Setup_Guide.pdf&lt;/p&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://x-plane.com/manuals/desktop/index.html#calibratingthehardware"&gt;X-Plane 11 Manual&lt;/a&gt;
&lt;a href="https://questions.x-plane.com/1806/serial-throttle-quadrant-converter-require-special-driver"&gt;Discussion on drivers for serial controls&lt;/a&gt;
&lt;a href="https://www.avsim.com/forums/topic/501181-problem-calibrating-usb-pfc-controls-in-x-plane-10/"&gt;Calibration issues with serial ports&lt;/a&gt;
&lt;a href="https://forums.x-plane.org/index.php?/forums/topic/111166-serial-port-to-usb-pfc/&amp;amp;page=2"&gt;Converting serial port to USB for XP11&lt;/a&gt;
&lt;a href="https://flypfc.com/wp-content/uploads/support/Serial_CATIII_%20and_X-Plane_9_%20Setup_Guide.pdf"&gt;Avionics stack set up for XP9&lt;/a&gt;&lt;/p&gt;</content><category term="blog"/><category term="cs"/><category term="programming"/><category term="work"/></entry><entry><title>Zork Server</title><link href="https://adnanvaldes.pages.dev/202203071616.html" rel="alternate"/><published>2022-03-07T00:00:00-08:00</published><updated>2024-11-26T09:32:38-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2022-03-07:/202203071616.html</id><summary type="html">&lt;p&gt;I love text adventure games. I am not very good at them, but I very much enjoy the world building and interactive aspect of text-based terminal games, in much the same way that I love tabletop RPGs like &lt;em&gt;Dungeons and Dragons&lt;/em&gt; or &lt;em&gt;Stars Without Number&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Text adventures are also excellent candidates for in-flight entertainment on long-haul routes. I recently travelled to Delhi from Vancouver, on a flight that was scheduled 3 days after the beginning of the Russian invasion of Ukraine. Because of the closure of Russian airspace to most airlines, my route was YVR -&amp;gt; YYZ (3 hour stop) YYZ -&amp;gt; Delhi. In other words, the ETE changed from about 13 hours to just over 22 hours.&lt;/p&gt;
&lt;p&gt;To set up, I bought the Zork Anthology through Steam. I know Infocom has made Zork 1 - 3 &lt;a href="http://www.infocom-if.org/downloads/downloads.html"&gt;available for free&lt;/a&gt;, but because this was a fairly late schedule change I decided to go the easy way and shell out $8.00 for the whole set.&lt;/p&gt;
&lt;p&gt;The games themselves work well, but I had a few problems with the set-up. To start with, I have Manjaro installed on all my computers, but the Zork Anthology only has a Windows release on Steam. Not much of an issue in itself: I regularly use Proton to play on Linux and I have had very few problems. However, the thought of running Proton to &lt;em&gt;then&lt;/em&gt; run a DOS emulator to play Zork rubbed me the wrong way.&lt;/p&gt;
&lt;p&gt;The other option I've seen is to play Zork through …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love text adventure games. I am not very good at them, but I very much enjoy the world building and interactive aspect of text-based terminal games, in much the same way that I love tabletop RPGs like &lt;em&gt;Dungeons and Dragons&lt;/em&gt; or &lt;em&gt;Stars Without Number&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Text adventures are also excellent candidates for in-flight entertainment on long-haul routes. I recently travelled to Delhi from Vancouver, on a flight that was scheduled 3 days after the beginning of the Russian invasion of Ukraine. Because of the closure of Russian airspace to most airlines, my route was YVR -&amp;gt; YYZ (3 hour stop) YYZ -&amp;gt; Delhi. In other words, the ETE changed from about 13 hours to just over 22 hours.&lt;/p&gt;
&lt;p&gt;To set up, I bought the Zork Anthology through Steam. I know Infocom has made Zork 1 - 3 &lt;a href="http://www.infocom-if.org/downloads/downloads.html"&gt;available for free&lt;/a&gt;, but because this was a fairly late schedule change I decided to go the easy way and shell out $8.00 for the whole set.&lt;/p&gt;
&lt;p&gt;The games themselves work well, but I had a few problems with the set-up. To start with, I have Manjaro installed on all my computers, but the Zork Anthology only has a Windows release on Steam. Not much of an issue in itself: I regularly use Proton to play on Linux and I have had very few problems. However, the thought of running Proton to &lt;em&gt;then&lt;/em&gt; run a DOS emulator to play Zork rubbed me the wrong way.&lt;/p&gt;
&lt;p&gt;The other option I've seen is to play Zork through a web-based console, such as the one on &lt;a href="http://textadventures.co.uk/games/play/5zyoqrsugeopel3ffhz_vq"&gt;text adventures&lt;/a&gt;. It's a good way of making the game available to a more general audiene. What it lacks, I think, is correct aesthetic. That is, when running the game on a terminal all you see is the game's text and your prompt - what's more, you can have the terminal use your personalized colors and font. The browser version, on the other hand, has a much smaller play area, uses a single console theme, and is full of distractions, with tabs, links, ads, JS scripts, etc.&lt;/p&gt;
&lt;p&gt;After landing in Delhi, then, I decided I would create my own Zork server. Originally I wanted to run it in my home, using Proxmox and LXC containers, but because I also wanted to make it available to the public, the end result is a GCP instance.&lt;/p&gt;
&lt;h1&gt;Setting up an SSH Infocom server&lt;/h1&gt;
&lt;p&gt;The first decision I made was to use SSH for access into the server. I looked around and saw that there were a few Telnet servers that others have created in the past few years. You could argue that Telnet is a more appropriate protocol for a retro game (which allows for easier access, given the nature of Telnet itself). However, on a Windows machine the Telnet client has to be explicitly enabled via the command line or through the system settings interface; this alone adds an extra barrier to entry for my friends who are not huge computer nerds.&lt;/p&gt;
&lt;p&gt;Additionally, SSH is a more secure protocol. I don't think that transmitting commands for Zork or other text-adventure games allows for the exploitation of particularly sensitive data. Yet, given that OpenSSH is available by default on most systems, choosing the more secure option has the benefit of creating less friction.&lt;/p&gt;
&lt;h2&gt;Game files&lt;/h2&gt;
&lt;p&gt;While I could have downloaded the Zork games from the aforementioned Infocom website, I figured the Zork Anthology included the files themselves - files probably too old to have any sort of DRM. Sure enough, navigating to the anthology's local game files I found several DOSBOX &lt;code&gt;exe&lt;/code&gt; files as well as a &lt;code&gt;.dat&lt;/code&gt; file for Zork 1 through 3, Beyond Zork, and Planetfall.&lt;/p&gt;
&lt;p&gt;With those in hand, I had to find a program to run a &lt;a href="https://www.wikiwand.com/en/Z-machine"&gt;Z-machine&lt;/a&gt;. Fortunately, this was as easy as installing &lt;a href="https://davidgriffith.gitlab.io/frotz/"&gt;Frotz&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;frotz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, all I had to do was run &lt;code&gt;frotz zork.dat&lt;/code&gt; and I was well on my way to being eaten by a grue.&lt;/p&gt;
&lt;h2&gt;Setting up an SSH server&lt;/h2&gt;
&lt;p&gt;At this point I had the games running locally, but that's not very useful if I'm somewhere else or if I want my friends to access the game. I decided to run the server on the free tier of some cloud provider, mostly to avoid opening port 22 on my home router and because I didn't want strangers SSH'ing into my computers (see below for security!). The other advantage of using a cloud provider was that most of the time I would have access to a static IP, so I would not have to worry about dynamic DNS or using an API to monitor any changes that my ISP makes.&lt;/p&gt;
&lt;p&gt;After shopping around for a bit, I settled on using Google's Compute Engine. This is partly out of familiarity - I already had a Pi-Hole instance running there - but mostly because they offer a perpetual free tier (unlike AWS, which is a 12 month trial).&lt;/p&gt;
&lt;p&gt;Setting up the VM was a breeze, too. The free tier allows you to use an E2-micro general purpose VM with 10GB of storage space, 2 vCPUs and 1GB of memory. Far more than enough for 6 games from the late 70s/early 80s that are maybe 1 MB each. &lt;/p&gt;
&lt;p&gt;I don't think it matters much, but I chose Debian 11 as my gues OS. I originally tried all of this with Alpine, but that was far too much work and I couldn't make it work.&lt;/p&gt;
&lt;h3&gt;Creating root access for set up&lt;/h3&gt;
&lt;p&gt;Once the VM was running, I used the Google Console to edit the instance's &lt;code&gt;sshd_config&lt;/code&gt; file. Specifically, I allowed root access with a password (this was mostly out of frustration with trying to set up SSH keys from my computer). This was intended to be a temporary measure, just to allow me to install all the required components using my own terminal, instead of the browser-based version you get from the Google dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PermitRootLogin yes
StrictMode yes
MasAuthTries 3
MassSessions 1

PasswordAuthentication yes
PermitEmptyPasswords no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Installing frotz and firejail&lt;/h3&gt;
&lt;p&gt;Once in the VM, I installed &lt;code&gt;frotz&lt;/code&gt; and &lt;code&gt;firejail&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;frotz&lt;span class="w"&gt; &lt;/span&gt;firejail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I mentioned above, &lt;code&gt;frotz&lt;/code&gt; is the interpreter used to run the games themselves. &lt;code&gt;firejail&lt;/code&gt;, on the other hand, was installed as an added level of security. I am no pen tester by any means, but the firejail &lt;a href="https://firejail.wordpress.com/"&gt;website&lt;/a&gt; claims that it "reduces the risk of security breaches by restricting the running environment of untrusted applications using Linux namespaces and seccomp-bpf".&lt;/p&gt;
&lt;p&gt;From what I gather, this translates (at the risk of being rather reductive) to creating a sandbox or "container" wherein the relevant application is running. As a result, the program itself is less likely to be exploited to gain access to other parts of the system.&lt;/p&gt;
&lt;p&gt;The main thing about it was that the promise of a sandbox environment coupled with ridiculous ease of use (in my case at least) means there is very little risk to me. To use firejail along with frotz, this is the command I had to run (note: I created a different user to try this, since firejail sensibly refused to be run as root):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firejail&lt;span class="w"&gt; &lt;/span&gt;frotz&lt;span class="w"&gt; &lt;/span&gt;zork.dat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just like that, the game started up. There is still some &lt;code&gt;stdout&lt;/code&gt; stuff on the terminal that I don't know how to remove, but at least it suggests something is working.&lt;/p&gt;
&lt;h3&gt;adding new user, moving .DAT files&lt;/h3&gt;
&lt;p&gt;The next step was to create a specific user that would interact with the games - that is, a user that everyone has access to. Because this user is the public facing side of the set up, I also wanted to ensure that it was fairly restricted. The solution is to use &lt;code&gt;rbash&lt;/code&gt;, a restrictive version of &lt;code&gt;bash&lt;/code&gt; that still allows the user to use the terminal with appropriate restrictions.&lt;/p&gt;
&lt;p&gt;I started by changing the user's shell and adding the user's bin directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chsh&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/bin/rbash&lt;span class="w"&gt; &lt;/span&gt;zork
touch&lt;span class="w"&gt; &lt;/span&gt;/home/zork/.bashrc
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/home/zork/user/bin
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"export PATH=/home/zork/usr/bin"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, the &lt;code&gt;zork&lt;/code&gt; user is unable to run any commands, since there are no programs to run in their personal &lt;code&gt;bin&lt;/code&gt;. Given the nature of this set up, the only binaries that should exist in this &lt;code&gt;bin&lt;/code&gt; directory are &lt;code&gt;firejail&lt;/code&gt; and &lt;code&gt;frotz&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/firejail&lt;span class="w"&gt; &lt;/span&gt;/home/zork/usr/bin/firejail
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/frotz&lt;span class="w"&gt; &lt;/span&gt;/home/zork/usr/bin/frotz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I also had to set the right permissions in order for this user to access the new directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;750&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/zork
chown&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;zork:zork&lt;span class="w"&gt; &lt;/span&gt;/home/zork
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, I used &lt;code&gt;scp&lt;/code&gt; to move the .DAT files that came with the anthology into the server. I renamed the files and removed the extension for ease of use, and so that I could add the following lines in the zork user's .bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;zork&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firejail frotz zork"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;zork2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firejail frotz zork2"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;zork3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firejail frotz zork3"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;beyond_zork&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firejail frotz beyond_zork"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;planetfall&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firejail frotz planetfall"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, anybody that connects to the server can only call &lt;code&gt;firejail&lt;/code&gt; or &lt;code&gt;frotz&lt;/code&gt;, and with the aliases it becomes quite easy to start any of the games.&lt;/p&gt;
&lt;h3&gt;adding instructions&lt;/h3&gt;
&lt;p&gt;I added this to the server's &lt;code&gt;motd&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;######################&lt;/span&gt;
&lt;span class="nx"&gt;WELCOME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PLANETFALL&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="err"&gt;######################&lt;/span&gt;

&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;microserver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;designed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entirely&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Infocom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;adventures&lt;/span&gt;
&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;simply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;
&lt;span class="nx"&gt;Available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;games&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zork&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zork2&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;zork3&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;beyond_zork&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;planetfall&lt;/span&gt;

&lt;span class="nx"&gt;Have&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eaten&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;grue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I figured that is enough information to at least get started. I might change that in the future. I also still want to figure out a way to call it when a user types &lt;code&gt;help&lt;/code&gt;, for example.&lt;/p&gt;
&lt;h3&gt;securing all files&lt;/h3&gt;
&lt;p&gt;To ensure that none of the files would be changed (no additions to the &lt;code&gt;bin&lt;/code&gt; directory, for example), I used &lt;code&gt;chattr&lt;/code&gt; (short for "change attributes").&lt;/p&gt;
&lt;p&gt;Conveniently, one of the attributes that one can set is &lt;code&gt;i&lt;/code&gt; to make it immutable. From the &lt;code&gt;chattr&lt;/code&gt; man page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A file with the 'i' attribute cannot be modified: it cannot be deleted or renamed, no link can  be created  to  this  file,  most of the file's metadata can not be modified, and the file can not be opened in write mode.  Only the superuser or a process possessing the CAP_LINUX_IMMUTABLE capability can set or clear this attribute.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus, &lt;code&gt;chattr +i /home/zork&lt;/code&gt;.&lt;/p&gt;</content><category term="blog"/><category term="cs"/><category term="linux"/><category term="project"/></entry><entry><title>Admin</title><link href="https://adnanvaldes.pages.dev/admin.html" rel="alternate"/><published>2021-03-01T00:00:00-08:00</published><updated>2024-12-22T13:25:27-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2021-03-01:/admin.html</id><summary type="html">&lt;h2&gt;Advanced configuration&lt;/h2&gt;
&lt;p&gt;From registered models, Django automatically includes record indentification via the model's &lt;code&gt;__str__()&lt;/code&gt; method. This also includes a bulk delete operation for records of a particular model.&lt;/p&gt;
&lt;p&gt;However, Django also gives us the ability to further customise the interface. We can do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List views&lt;ul&gt;
&lt;li&gt;Add additional fields or information for each record&lt;/li&gt;
&lt;li&gt;Add filters to select records&lt;/li&gt;
&lt;li&gt;Add additional options to the actions menu, as well as choose where the menu is&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detail views&lt;ul&gt;
&lt;li&gt;Choose which fields to display, which to exlucde, their order, grouping, etc.&lt;/li&gt;
&lt;li&gt;Add related fields to a record to allow inline editing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Register ModelAdmin class&lt;/h3&gt;
&lt;p&gt;To change how a model is displayed on the admin interface we must define and register a &lt;a href="https://docs.djangoproject.com/en/3.1/ref/contrib/admin/#modeladmin-objects"&gt;ModelAdmin&lt;/a&gt; class, which is used to define the layout of the admin site.&lt;/p&gt;
&lt;p&gt;For example, given the Terminus Library Author model, we can do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="c1"&gt;# Defining admin class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Register the admin class with an associated admin moodel&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, the above admin class is empty, so the views will remain unchanged for now.&lt;/p&gt;
&lt;p&gt;We can also register the models using a decorator on the relevant admin class, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="nd"&gt;@admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;List view&lt;/h2&gt;
&lt;h3&gt;Customise ModelAdmin class&lt;/h3&gt;
&lt;p&gt;By default, Django uses a model's &lt;code&gt;__str__()&lt;/code&gt; class to display information on the admin list view. While is is not bad design for smaller projects, once the scale …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Advanced configuration&lt;/h2&gt;
&lt;p&gt;From registered models, Django automatically includes record indentification via the model's &lt;code&gt;__str__()&lt;/code&gt; method. This also includes a bulk delete operation for records of a particular model.&lt;/p&gt;
&lt;p&gt;However, Django also gives us the ability to further customise the interface. We can do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List views&lt;ul&gt;
&lt;li&gt;Add additional fields or information for each record&lt;/li&gt;
&lt;li&gt;Add filters to select records&lt;/li&gt;
&lt;li&gt;Add additional options to the actions menu, as well as choose where the menu is&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detail views&lt;ul&gt;
&lt;li&gt;Choose which fields to display, which to exlucde, their order, grouping, etc.&lt;/li&gt;
&lt;li&gt;Add related fields to a record to allow inline editing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Register ModelAdmin class&lt;/h3&gt;
&lt;p&gt;To change how a model is displayed on the admin interface we must define and register a &lt;a href="https://docs.djangoproject.com/en/3.1/ref/contrib/admin/#modeladmin-objects"&gt;ModelAdmin&lt;/a&gt; class, which is used to define the layout of the admin site.&lt;/p&gt;
&lt;p&gt;For example, given the Terminus Library Author model, we can do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="c1"&gt;# Defining admin class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Register the admin class with an associated admin moodel&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, the above admin class is empty, so the views will remain unchanged for now.&lt;/p&gt;
&lt;p&gt;We can also register the models using a decorator on the relevant admin class, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="nd"&gt;@admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;List view&lt;/h2&gt;
&lt;h3&gt;Customise ModelAdmin class&lt;/h3&gt;
&lt;p&gt;By default, Django uses a model's &lt;code&gt;__str__()&lt;/code&gt; class to display information on the admin list view. While is is not bad design for smaller projects, once the scale increases it may be necessary to change the display to differentiate records more easily.&lt;/p&gt;
&lt;p&gt;For example, let's say we want to display authors in the list view with entries for &lt;code&gt;Sname&lt;/code&gt;, &lt;code&gt;Fname&lt;/code&gt;, &lt;code&gt;DOB&lt;/code&gt;, &lt;code&gt;DOD&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'date_of_birth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'date_of_death'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Dealing with ManyToManyFields&lt;/h3&gt;
&lt;p&gt;Continuing with Terminus Library, if we want a book in the list view to show its title, author, and genre, we might register an admin class like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'display_genre'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;display_genre&lt;/code&gt; is a method we add into the Book model. In other words, we can use a method's name here to display it in the list view. Generally we may want to avoid having Django make costly database calls once the DB grows to a certain size.&lt;/p&gt;
&lt;p&gt;To make the above work, the &lt;code&gt;Book&lt;/code&gt; model must be changed to include the following method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_genre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;"""Create a string for the Genre, used to display genre in Admin"""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;display_genre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Genre"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding list filters&lt;/h3&gt;
&lt;p&gt;As the list of items in the admin page grows, it can be useful to create filters. This is done by listing fields in the &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;code&gt;list_filter&lt;/code&gt; attribute. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#filename: terminus/catalog/admin.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookInstanceAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'due_back'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Detail view&lt;/h2&gt;
&lt;h3&gt;Organizing detail view layout&lt;/h3&gt;
&lt;p&gt;By default, the detail views lay out the fields vertically in the order that they were declared in a model. To do this, we simply add a &lt;code&gt;fields&lt;/code&gt; list attribute to the relevant model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'date_of_birth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'date_of_death'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fields&lt;/code&gt; attribute simply declares in what order the fields will be shown on the detail view. Fields are displayed vertically by default, one after the other; however, we can use tuples to show them horizontally.&lt;/p&gt;
&lt;p&gt;We can also include an &lt;code&gt;exclude&lt;/code&gt; attribute to specify which model attributes to hide.&lt;/p&gt;
&lt;h3&gt;Sectioning detail view&lt;/h3&gt;
&lt;p&gt;In the detail view, in addition to organizing the field display orders, we can create sections to group related model information using &lt;a href="https://docs.djangoproject.com/en/3.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets"&gt;fieldsets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we want to create a section for the &lt;code&gt;BookInstance&lt;/code&gt; model that refers to book-specific attributes and another that refers to availability, we might do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: terminus/catalog/admin.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookInstanceAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;fieldsets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# The first item of the tuple is the name of the section&lt;/span&gt;
            &lt;span class="s1"&gt;'fields'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'imprint'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Availability'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'fields'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'due_back'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Inline editing of associated records&lt;/h2&gt;
&lt;p&gt;If we want the ability to add associated records at the same time, we can use inline editing. This may be useful, for example, if we want to add information about both a book and about a specific copy of a book.&lt;/p&gt;
&lt;p&gt;This is achieved by using &lt;a href="https://docs.djangoproject.com/en/3.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.inlines"&gt;inline&lt;/a&gt; classes, of type &lt;code&gt;TabularInline&lt;/code&gt; for horizontal layouts or &lt;code&gt;StackedInline&lt;/code&gt; for vertical layouts.&lt;/p&gt;
&lt;p&gt;For instance:
```Python&lt;/p&gt;
&lt;h1&gt;filename: terminus/catalog/admin.py&lt;/h1&gt;
&lt;p&gt;class BooksInstanceInline(admin.TabularInline):
    model = BookInstance&lt;/p&gt;
&lt;p&gt;@admin.register(Book)
class BookAdmin(admin.ModelAdmin):
    ...
    ...
    inlines = [BookInstanceInline]&lt;/p&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/3.1/ref/contrib/admin/"&gt;Django Admin Site&lt;/a&gt;&lt;/p&gt;</content><category term="blog"/></entry><entry><title>Add_ssh_key</title><link href="https://adnanvaldes.pages.dev/add_ssh_key.html" rel="alternate"/><published>2021-02-02T00:00:00-08:00</published><updated>2024-12-22T13:24:21-08:00</updated><author><name>Adnan Valdes</name></author><id>tag:adnanvaldes.pages.dev,2021-02-02:/add_ssh_key.html</id><content type="html">&lt;h2&gt;Generate SSH keys&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t [OPTIONS]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note than RSA should be avoided, unless ed25519 is not available.&lt;/p&gt;
&lt;h2&gt;Configure multiple keys for different servers&lt;/h2&gt;
&lt;p&gt;To manage different keys for different servers, create an ssh config file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In it, use the following synstax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/_id_rsa
  IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, we can change the &lt;code&gt;Host&lt;/code&gt; header while keeping the appropriate &lt;code&gt;HostName&lt;/code&gt; to access servers as an alias, such that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Host myserver
    HostName ssh.steve.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Allows an SSH connection into &lt;code&gt;ssh.steve.com&lt;/code&gt; by simply running &lt;code&gt;ssh myserver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note, too, that to avoid entering SSH passwords every time we should add
&lt;code&gt;Host *
    AddKeysToAgent yes
    UseKeychain yes&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Send SSH pub key to server&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;ssh-copy-id&lt;/code&gt; command to send the appropriate files to the server. Note that if using a different file name (which would be the case if followed above steps), the command structure is as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-copy-id -i ~/.ssh/path/to/key USER@SERVER&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the command does NOT require a references to the &lt;code&gt;.pub&lt;/code&gt; file, just the key itself.&lt;/p&gt;
&lt;h2&gt;Using hostnames instead of IPs&lt;/h2&gt;
&lt;p&gt;For LAN connections, ensure that a DNS record is set for the host name. On a Pi-Hole, for instance, set a DNS record named &lt;code&gt;anachreon.earth&lt;/code&gt; to point at &lt;code&gt;192.168.1.98&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then use &lt;code&gt;anachreon.earth&lt;/code&gt; in the ssh config file.&lt;/p&gt;</content><category term="blog"/></entry></feed>